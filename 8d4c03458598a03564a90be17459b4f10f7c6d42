{
  "comments": [
    {
      "key": {
        "uuid": "7a96c907_16e1099a",
        "filename": "opendaylight/networkconfiguration/neutron/model/src/main/yang/neutron.yang",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 2106
      },
      "writtenOn": "2015-01-20T17:31:34Z",
      "side": 1,
      "message": "I like the fact that this is one model for all of neutron (port, net, subnet), but at the same time I am concerned that this will not work very well in a cluster, where effectively all the data will be stored on just one node (which owns this model shard). Splitting up into multiple models would make things better from that angle, as well as provide some modularity (next comment)",
      "revId": "8d4c03458598a03564a90be17459b4f10f7c6d42",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_c4b9a416",
        "filename": "opendaylight/networkconfiguration/neutron/model/src/main/yang/neutron.yang",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1569
      },
      "writtenOn": "2015-01-22T13:56:03Z",
      "side": 1,
      "message": "Breaking up into multiple modules has benefits, and I can see us updating mechanism_odl.py to handle this easily.  Though it might seem to help clustering distribution today, that\u0027s by accident.  Last I knew was that clustering was going to introduce a yang path defined hash point for finer grained sharding, and thus distribution would be achieved within a single module.",
      "parentUuid": "7a96c907_16e1099a",
      "revId": "8d4c03458598a03564a90be17459b4f10f7c6d42",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_7993954f",
        "filename": "opendaylight/networkconfiguration/neutron/model/src/main/yang/neutron.yang",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 2106
      },
      "writtenOn": "2015-01-23T12:13:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7a96c907_c4b9a416",
      "revId": "8d4c03458598a03564a90be17459b4f10f7c6d42",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_b6eff586",
        "filename": "opendaylight/networkconfiguration/neutron/model/src/main/yang/neutron.yang",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 2106
      },
      "writtenOn": "2015-01-20T17:31:34Z",
      "side": 1,
      "message": "Any additions to this model, or fixes will drive the revision up and effectively break anyone\u0027s code written against this model rev. This is not modular, as in effect, the model as it stands today is probably good for use as a L2 model (for L2 apps), and it would be not sensible to see these apps broken because of, say, the addition of Neutron Firewall rules .\nAnother reason why it may be better to split up the model into port, net and subnet, etc models.",
      "revId": "8d4c03458598a03564a90be17459b4f10f7c6d42",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_843b9c9b",
        "filename": "opendaylight/networkconfiguration/neutron/model/src/main/yang/neutron.yang",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1569
      },
      "writtenOn": "2015-01-22T13:56:03Z",
      "side": 1,
      "message": "Extensions seem to occur still on existing modules, so then what?  we use an augmentation .yang to avoid modifying the original base yang.  ( I\u0027m new to yang by the way if that wasn\u0027t clear :-) )",
      "parentUuid": "7a96c907_b6eff586",
      "revId": "8d4c03458598a03564a90be17459b4f10f7c6d42",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_59901943",
        "filename": "opendaylight/networkconfiguration/neutron/model/src/main/yang/neutron.yang",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 2106
      },
      "writtenOn": "2015-01-23T12:13:42Z",
      "side": 1,
      "message": "Well, having one base model + a mass of augmentations, and then further augmentations of the added nodes, is certainly one way. Personally, I find that it gets quite complex quite quickly. What more, in this case where the vast bulk of the v2 API is already firmly defined and is modular, having a similar modular set f models would be advantageous.",
      "parentUuid": "7a96c907_843b9c9b",
      "revId": "8d4c03458598a03564a90be17459b4f10f7c6d42",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_08cc5634",
        "filename": "opendaylight/networkconfiguration/neutron/model/src/main/yang/neutron.yang",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 21
      },
      "writtenOn": "2015-02-05T16:57:13Z",
      "side": 1,
      "message": "Why we are using \"_._\" in names? \nDoes this have any specific meaning?\n\nI noticed this pattern at several points,\ndoes that means all provider_._ leafs should be grouped\ntogether?\n\nIs not container better option?\n\neg. \n\ncontainer provider {\n   leaf network_type {\n\n   }\n   leaf segementation_id {\n\n   }\n}",
      "range": {
        "startLine": 30,
        "startChar": 17,
        "endLine": 30,
        "endChar": 20
      },
      "revId": "8d4c03458598a03564a90be17459b4f10f7c6d42",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_36552550",
        "filename": "opendaylight/networkconfiguration/neutron/model/src/main/yang/neutron.yang",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 2106
      },
      "writtenOn": "2015-01-20T17:31:34Z",
      "side": 1,
      "message": "While a single id leaf for all the items is nice from a modelling perspective, in practice with the auto-generated code it will be incredibly confusing thinking (and reading) code as well as restconf returns, about \"which id am I dealing with now\", eg port-id, netw-id, subnet-id, etc. I would advocate that each id should be clearly named, eg portUUID, netUUID, subnetUUID.",
      "revId": "8d4c03458598a03564a90be17459b4f10f7c6d42",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_2442c810",
        "filename": "opendaylight/networkconfiguration/neutron/model/src/main/yang/neutron.yang",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1569
      },
      "writtenOn": "2015-01-22T13:56:03Z",
      "side": 1,
      "message": "I\u0027ll buy that.  Again it\u0027s fairly simple to translate to Neutron REST.",
      "parentUuid": "7a96c907_36552550",
      "revId": "8d4c03458598a03564a90be17459b4f10f7c6d42",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_399d0d5a",
        "filename": "opendaylight/networkconfiguration/neutron/model/src/main/yang/neutron.yang",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 2106
      },
      "writtenOn": "2015-01-23T12:13:42Z",
      "side": 1,
      "message": "Cool.",
      "parentUuid": "7a96c907_2442c810",
      "revId": "8d4c03458598a03564a90be17459b4f10f7c6d42",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_68dcfae4",
        "filename": "opendaylight/networkconfiguration/neutron/model/src/main/yang/neutron.yang",
        "patchSetId": 1
      },
      "lineNbr": 89,
      "author": {
        "id": 21
      },
      "writtenOn": "2015-02-05T16:57:13Z",
      "side": 1,
      "message": "should not be this same type as subnet id? eg. uuid?\nPlease use proper types instead of strings whenever possible.",
      "range": {
        "startLine": 89,
        "startChar": 11,
        "endLine": 89,
        "endChar": 17
      },
      "revId": "8d4c03458598a03564a90be17459b4f10f7c6d42",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_88d706bf",
        "filename": "opendaylight/networkconfiguration/neutron/model/src/main/yang/neutron.yang",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 21
      },
      "writtenOn": "2015-02-05T16:57:13Z",
      "side": 1,
      "message": "same as previous... should not be there container binding?",
      "range": {
        "startLine": 126,
        "startChar": 4,
        "endLine": 126,
        "endChar": 37
      },
      "revId": "8d4c03458598a03564a90be17459b4f10f7c6d42",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_76e96d7f",
        "filename": "opendaylight/networkconfiguration/neutron/model/src/main/yang/neutron.yang",
        "patchSetId": 1
      },
      "lineNbr": 137,
      "author": {
        "id": 2106
      },
      "writtenOn": "2015-01-20T17:31:34Z",
      "side": 1,
      "message": "Missing bindinghostID + some others from the Neutron v2 API extensions",
      "revId": "8d4c03458598a03564a90be17459b4f10f7c6d42",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_c450c4d6",
        "filename": "opendaylight/networkconfiguration/neutron/model/src/main/yang/neutron.yang",
        "patchSetId": 1
      },
      "lineNbr": 137,
      "author": {
        "id": 1569
      },
      "writtenOn": "2015-01-22T13:56:03Z",
      "side": 1,
      "message": "\"binding:host_id\": \"devstack\"\n\nleaf binding_._host_id {\n    type string;\n    description \"In some cases different implementations may be run on different hosts. The host on which the port will be allocated.\";\n}",
      "parentUuid": "7a96c907_76e96d7f",
      "revId": "8d4c03458598a03564a90be17459b4f10f7c6d42",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_39af4d96",
        "filename": "opendaylight/networkconfiguration/neutron/model/src/main/yang/neutron.yang",
        "patchSetId": 1
      },
      "lineNbr": 137,
      "author": {
        "id": 2106
      },
      "writtenOn": "2015-01-23T12:13:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7a96c907_c450c4d6",
      "revId": "8d4c03458598a03564a90be17459b4f10f7c6d42",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_d6f2c16e",
        "filename": "opendaylight/networkconfiguration/neutron/model/src/main/yang/neutron.yang",
        "patchSetId": 1
      },
      "lineNbr": 185,
      "author": {
        "id": 2106
      },
      "writtenOn": "2015-01-20T17:31:34Z",
      "side": 1,
      "message": "These should be of type inet:ip-address",
      "revId": "8d4c03458598a03564a90be17459b4f10f7c6d42",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_645f70e6",
        "filename": "opendaylight/networkconfiguration/neutron/model/src/main/yang/neutron.yang",
        "patchSetId": 1
      },
      "lineNbr": 185,
      "author": {
        "id": 1569
      },
      "writtenOn": "2015-01-22T13:56:03Z",
      "side": 1,
      "message": "agreed",
      "parentUuid": "7a96c907_d6f2c16e",
      "revId": "8d4c03458598a03564a90be17459b4f10f7c6d42",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_d9950941",
        "filename": "opendaylight/networkconfiguration/neutron/model/src/main/yang/neutron.yang",
        "patchSetId": 1
      },
      "lineNbr": 185,
      "author": {
        "id": 2106
      },
      "writtenOn": "2015-01-23T12:13:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7a96c907_645f70e6",
      "revId": "8d4c03458598a03564a90be17459b4f10f7c6d42",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_28e6f2b4",
        "filename": "opendaylight/networkconfiguration/neutron/model/src/main/yang/neutron.yang",
        "patchSetId": 1
      },
      "lineNbr": 247,
      "author": {
        "id": 21
      },
      "writtenOn": "2015-02-05T16:57:13Z",
      "side": 1,
      "message": "is this really necessary? Yang has concept of revisions?\nWithout this this model could be used to render also northbound v3.0 etc.",
      "range": {
        "startLine": 247,
        "startChar": 2,
        "endLine": 247,
        "endChar": 18
      },
      "revId": "8d4c03458598a03564a90be17459b4f10f7c6d42",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_3603e543",
        "filename": "opendaylight/networkconfiguration/neutron/model/src/main/yang/neutron.yang",
        "patchSetId": 1
      },
      "lineNbr": 249,
      "author": {
        "id": 2106
      },
      "writtenOn": "2015-01-20T17:31:34Z",
      "side": 1,
      "message": "A portsOnNetwork leaf-list would be useful here. It\u0027s otherwise currently difficult to get a snapshot of which ports are on a given network. This is not part of the official neutron API, but it is part of the existing Neutron ODL implementation",
      "revId": "8d4c03458598a03564a90be17459b4f10f7c6d42",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_245968fe",
        "filename": "opendaylight/networkconfiguration/neutron/model/src/main/yang/neutron.yang",
        "patchSetId": 1
      },
      "lineNbr": 249,
      "author": {
        "id": 1569
      },
      "writtenOn": "2015-01-22T13:56:03Z",
      "side": 1,
      "message": "I couldn\u0027t find any neutron doc on this, can you?",
      "parentUuid": "7a96c907_3603e543",
      "revId": "8d4c03458598a03564a90be17459b4f10f7c6d42",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96c907_39866d14",
        "filename": "opendaylight/networkconfiguration/neutron/model/src/main/yang/neutron.yang",
        "patchSetId": 1
      },
      "lineNbr": 249,
      "author": {
        "id": 2106
      },
      "writtenOn": "2015-01-23T12:13:42Z",
      "side": 1,
      "message": "It\u0027s not in the API, but if you look at the legacy ODL implementation it\u0027s there. And frankly, it comes in useful. Can be in the \"operational\" data store.",
      "parentUuid": "7a96c907_245968fe",
      "revId": "8d4c03458598a03564a90be17459b4f10f7c6d42",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}