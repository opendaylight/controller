{
  "comments": [
    {
      "key": {
        "uuid": "ba8cc1f7_950ea433",
        "filename": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/stream/DDSNormalizedNodeStreamReader.java",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 795
      },
      "writtenOn": "2014-10-24T02:22:24Z",
      "side": 1,
      "message": "I think the better package for this would be org.opendaylight.controller.cluster.datastore.node.utils.stream so that it is at the same level as the serialization",
      "revId": "98c509b174cc1752596a61c44469a4ecf642ccd9",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba8cc1f7_3513185e",
        "filename": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/stream/DDSNormalizedNodeStreamReader.java",
        "patchSetId": 4
      },
      "lineNbr": 74,
      "author": {
        "id": 795
      },
      "writtenOn": "2014-10-24T02:22:24Z",
      "side": 1,
      "message": "Why create this private method to int the reader? Why not just do in the constructor?",
      "revId": "98c509b174cc1752596a61c44469a4ecf642ccd9",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba8cc1f7_95d6a4c4",
        "filename": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/stream/DDSNormalizedNodeStreamReader.java",
        "patchSetId": 4
      },
      "lineNbr": 74,
      "author": {
        "id": 1903
      },
      "writtenOn": "2014-10-24T15:31:06Z",
      "side": 1,
      "message": "I can change it, it was done, if we are doing more than one thing in constructor. Easier to read",
      "parentUuid": "ba8cc1f7_3513185e",
      "revId": "98c509b174cc1752596a61c44469a4ecf642ccd9",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba8cc1f7_55101c4e",
        "filename": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/stream/DDSNormalizedNodeStreamReader.java",
        "patchSetId": 4
      },
      "lineNbr": 85,
      "author": {
        "id": 795
      },
      "writtenOn": "2014-10-24T02:22:24Z",
      "side": 1,
      "message": "Why is the spacing off?",
      "revId": "98c509b174cc1752596a61c44469a4ecf642ccd9",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba8cc1f7_f51cd06c",
        "filename": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/stream/DDSNormalizedNodeStreamReader.java",
        "patchSetId": 4
      },
      "lineNbr": 101,
      "author": {
        "id": 795
      },
      "writtenOn": "2014-10-24T02:22:24Z",
      "side": 1,
      "message": "comment out of sync",
      "revId": "98c509b174cc1752596a61c44469a4ecf642ccd9",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba8cc1f7_35db18ef",
        "filename": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/stream/DDSNormalizedNodeStreamReader.java",
        "patchSetId": 4
      },
      "lineNbr": 101,
      "author": {
        "id": 1903
      },
      "writtenOn": "2014-10-24T15:31:06Z",
      "side": 1,
      "message": "will fix it",
      "parentUuid": "ba8cc1f7_f51cd06c",
      "revId": "98c509b174cc1752596a61c44469a4ecf642ccd9",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba8cc1f7_151a946e",
        "filename": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/stream/DDSNormalizedNodeStreamReader.java",
        "patchSetId": 4
      },
      "lineNbr": 105,
      "author": {
        "id": 795
      },
      "writtenOn": "2014-10-24T02:22:24Z",
      "side": 1,
      "message": "I think these debug log statements are a bit too much. Do we really need them in here?",
      "revId": "98c509b174cc1752596a61c44469a4ecf642ccd9",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba8cc1f7_55d81cef",
        "filename": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/stream/DDSNormalizedNodeStreamReader.java",
        "patchSetId": 4
      },
      "lineNbr": 105,
      "author": {
        "id": 1903
      },
      "writtenOn": "2014-10-24T15:31:06Z",
      "side": 1,
      "message": "Hmm, not really, i can remove them, if you want, i added them to track recursive calls.",
      "parentUuid": "ba8cc1f7_151a946e",
      "revId": "98c509b174cc1752596a61c44469a4ecf642ccd9",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba8cc1f7_d52bcc80",
        "filename": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/stream/DDSNormalizedNodeStreamReader.java",
        "patchSetId": 4
      },
      "lineNbr": 209,
      "author": {
        "id": 795
      },
      "writtenOn": "2014-10-24T02:22:24Z",
      "side": 1,
      "message": "How about avoiding the overhead of isNumeric and valueOf by writing a boolean to the stream which tells if the namespace is a number or not?",
      "revId": "98c509b174cc1752596a61c44469a4ecf642ccd9",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba8cc1f7_15aa9470",
        "filename": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/stream/DDSNormalizedNodeStreamReader.java",
        "patchSetId": 4
      },
      "lineNbr": 209,
      "author": {
        "id": 1842
      },
      "writtenOn": "2014-10-24T13:56:22Z",
      "side": 1,
      "message": "Agree. Also I think we should encode all 3 components of QName - see my comments in DDSNormalizedNodeStreamWriter.\n\nFor de-serialization, we\u0027d need a codeMap (Map\u003cInteger,String\u003e). First read the boolean. If it\u0027s true (a String), then it\u0027s the first occurrence so readUTF and put it in the codeMap with key codeMap.size(). If it\u0027s false (an int), readInt and lookup in the codeMap. Do the same for all 3 components then create the full String form as PathArgumentSerializer#qNameToString does and lookup in the QNameFactory.",
      "parentUuid": "ba8cc1f7_d52bcc80",
      "revId": "98c509b174cc1752596a61c44469a4ecf642ccd9",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba8cc1f7_f5e4d0ad",
        "filename": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/stream/DDSNormalizedNodeStreamReader.java",
        "patchSetId": 4
      },
      "lineNbr": 209,
      "author": {
        "id": 1903
      },
      "writtenOn": "2014-10-24T15:31:06Z",
      "side": 1,
      "message": "I can do that.",
      "parentUuid": "ba8cc1f7_15aa9470",
      "revId": "98c509b174cc1752596a61c44469a4ecf642ccd9",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba8cc1f7_b52648b9",
        "filename": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/stream/DDSNormalizedNodeStreamReader.java",
        "patchSetId": 4
      },
      "lineNbr": 216,
      "author": {
        "id": 795
      },
      "writtenOn": "2014-10-24T02:22:24Z",
      "side": 1,
      "message": "QName creation is expensive because the constructor parses the namespace as a URI and the revision as a Date. To avoid this creation overhead I created the QNameFactory. You need to pass a string to create the QName with the QNameFactory. I believe formatting that string will be cheaper than parsing the namespace and revision (PathArgumentSerializer#qNameToString)",
      "revId": "98c509b174cc1752596a61c44469a4ecf642ccd9",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba8cc1f7_15e2949f",
        "filename": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/stream/DDSNormalizedNodeStreamReader.java",
        "patchSetId": 4
      },
      "lineNbr": 216,
      "author": {
        "id": 1903
      },
      "writtenOn": "2014-10-24T15:31:06Z",
      "side": 1,
      "message": "will check that factory",
      "parentUuid": "ba8cc1f7_b52648b9",
      "revId": "98c509b174cc1752596a61c44469a4ecf642ccd9",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba8cc1f7_952544ad",
        "filename": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/stream/DDSNormalizedNodeStreamReader.java",
        "patchSetId": 4
      },
      "lineNbr": 244,
      "author": {
        "id": 795
      },
      "writtenOn": "2014-10-24T02:22:24Z",
      "side": 1,
      "message": "You should use a switch here - would be more optimal\n\nswitch(ValueType.values[objectType]) {\n}\n\nsee ValueSerializer.",
      "revId": "98c509b174cc1752596a61c44469a4ecf642ccd9",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba8cc1f7_b5ee488a",
        "filename": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/stream/DDSNormalizedNodeStreamReader.java",
        "patchSetId": 4
      },
      "lineNbr": 244,
      "author": {
        "id": 1903
      },
      "writtenOn": "2014-10-24T15:31:06Z",
      "side": 1,
      "message": "Sure, will fix it",
      "parentUuid": "ba8cc1f7_952544ad",
      "revId": "98c509b174cc1752596a61c44469a4ecf642ccd9",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba8cc1f7_353a38ce",
        "filename": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/stream/DDSNormalizedNodeStreamReader.java",
        "patchSetId": 4
      },
      "lineNbr": 303,
      "author": {
        "id": 795
      },
      "writtenOn": "2014-10-24T02:22:24Z",
      "side": 1,
      "message": "use switch instead of if-else",
      "revId": "98c509b174cc1752596a61c44469a4ecf642ccd9",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba8cc1f7_5537bce3",
        "filename": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/stream/DDSNormalizedNodeStreamReader.java",
        "patchSetId": 4
      },
      "lineNbr": 323,
      "author": {
        "id": 795
      },
      "writtenOn": "2014-10-24T02:22:24Z",
      "side": 1,
      "message": "The next 4 methods have repetitive code. I think all these builders extend NormalizedNodeContainerBuilder which has an addChild method see if using that helps reduce this repetitive code.",
      "revId": "98c509b174cc1752596a61c44469a4ecf642ccd9",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba8cc1f7_d5f3cc71",
        "filename": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/stream/DDSNormalizedNodeStreamReader.java",
        "patchSetId": 4
      },
      "lineNbr": 323,
      "author": {
        "id": 1903
      },
      "writtenOn": "2014-10-24T15:31:06Z",
      "side": 1,
      "message": "Besides Builders, the child objects are of different types",
      "parentUuid": "ba8cc1f7_5537bce3",
      "revId": "98c509b174cc1752596a61c44469a4ecf642ccd9",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba8cc1f7_75b0c0dd",
        "filename": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/stream/DDSNormalizedNodeStreamWriter.java",
        "patchSetId": 4
      },
      "lineNbr": 188,
      "author": {
        "id": 1842
      },
      "writtenOn": "2014-10-24T13:56:22Z",
      "side": 1,
      "message": "We can save space by only writing a byte for the type. You could cast ordinal to a byte or change the enums defs to bytes. I would suggest the latter to make it easier as NodeTypes is internal and there\u0027s no compelling reason to define enums.",
      "revId": "98c509b174cc1752596a61c44469a4ecf642ccd9",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba8cc1f7_95ed448e",
        "filename": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/stream/DDSNormalizedNodeStreamWriter.java",
        "patchSetId": 4
      },
      "lineNbr": 188,
      "author": {
        "id": 1903
      },
      "writtenOn": "2014-10-24T15:31:06Z",
      "side": 1,
      "message": "I wanted to do that, but then ValueTypes and pathArgument types are using Enum and use ordinal value in those, I ended up keeping Enum for nodetypes too, just for consistency. But i can change it",
      "parentUuid": "ba8cc1f7_75b0c0dd",
      "revId": "98c509b174cc1752596a61c44469a4ecf642ccd9",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba8cc1f7_35b0f88a",
        "filename": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/stream/DDSNormalizedNodeStreamWriter.java",
        "patchSetId": 4
      },
      "lineNbr": 188,
      "author": {
        "id": 1842
      },
      "writtenOn": "2014-10-24T16:12:29Z",
      "side": 1,
      "message": "You can keep NodeTypes as an enum for consistency and write the ordinal as a byte.",
      "parentUuid": "ba8cc1f7_95ed448e",
      "revId": "98c509b174cc1752596a61c44469a4ecf642ccd9",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba8cc1f7_15c1342e",
        "filename": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/stream/DDSNormalizedNodeStreamWriter.java",
        "patchSetId": 4
      },
      "lineNbr": 198,
      "author": {
        "id": 1842
      },
      "writtenOn": "2014-10-24T13:56:22Z",
      "side": 1,
      "message": "Use get here and check for null to avoid 2 map lookups.",
      "revId": "98c509b174cc1752596a61c44469a4ecf642ccd9",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba8cc1f7_75e8c07c",
        "filename": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/stream/DDSNormalizedNodeStreamWriter.java",
        "patchSetId": 4
      },
      "lineNbr": 198,
      "author": {
        "id": 1903
      },
      "writtenOn": "2014-10-24T15:31:06Z",
      "side": 1,
      "message": "good idea",
      "parentUuid": "ba8cc1f7_15c1342e",
      "revId": "98c509b174cc1752596a61c44469a4ecf642ccd9",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba8cc1f7_75e760e5",
        "filename": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/stream/DDSNormalizedNodeStreamWriter.java",
        "patchSetId": 4
      },
      "lineNbr": 205,
      "author": {
        "id": 1842
      },
      "writtenOn": "2014-10-24T13:56:22Z",
      "side": 1,
      "message": "In NormalizedNodeSerializer, Moiz encoded all 3 QName components - I think we should do the same here, similar to QNameSerializationContextImpl except we don\u0027t need the codes List. So for each component, it it\u0027s not in the codeMap, write the String representation (via writeUTF), otherwise write the int code (via writeInt). When reading back, we need to also indicate if it\u0027s a String or int so prepend a boolean (true if String, false if int).",
      "revId": "98c509b174cc1752596a61c44469a4ecf642ccd9",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba8cc1f7_3502383f",
        "filename": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/stream/DDSNormalizedNodeStreamWriter.java",
        "patchSetId": 4
      },
      "lineNbr": 205,
      "author": {
        "id": 1903
      },
      "writtenOn": "2014-10-24T15:31:06Z",
      "side": 1,
      "message": "Date, i can understand, but why localname? would not it differ most of the time?",
      "parentUuid": "ba8cc1f7_75e760e5",
      "revId": "98c509b174cc1752596a61c44469a4ecf642ccd9",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba8cc1f7_55ad7c30",
        "filename": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/stream/DDSNormalizedNodeStreamWriter.java",
        "patchSetId": 4
      },
      "lineNbr": 205,
      "author": {
        "id": 1842
      },
      "writtenOn": "2014-10-24T16:12:29Z",
      "side": 1,
      "message": "Maybe but it will be duplicated for lists in large trees (e.g. Node). The encoding worked well for the NormalizedNodeSerializer so I think we should implement it similarly here as well.",
      "parentUuid": "ba8cc1f7_3502383f",
      "revId": "98c509b174cc1752596a61c44469a4ecf642ccd9",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba8cc1f7_f53370f4",
        "filename": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/stream/DDSNormalizedNodeStreamWriter.java",
        "patchSetId": 4
      },
      "lineNbr": 228,
      "author": {
        "id": 795
      },
      "writtenOn": "2014-10-24T02:22:24Z",
      "side": 1,
      "message": "I\u0027m wondering if you could save yourself this code by just using Iterables.size()?",
      "revId": "98c509b174cc1752596a61c44469a4ecf642ccd9",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba8cc1f7_d5098c96",
        "filename": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/stream/DDSNormalizedNodeStreamWriter.java",
        "patchSetId": 4
      },
      "lineNbr": 228,
      "author": {
        "id": 1842
      },
      "writtenOn": "2014-10-24T13:56:22Z",
      "side": 1,
      "message": "Yes - Iterables.size() does this for you.",
      "parentUuid": "ba8cc1f7_f53370f4",
      "revId": "98c509b174cc1752596a61c44469a4ecf642ccd9",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba8cc1f7_15d8541c",
        "filename": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/stream/DDSNormalizedNodeStreamWriter.java",
        "patchSetId": 4
      },
      "lineNbr": 247,
      "author": {
        "id": 1842
      },
      "writtenOn": "2014-10-24T13:56:22Z",
      "side": 1,
      "message": "Similar to NodeTypes, we can save space by writing a single byte instead of the ordinal.",
      "revId": "98c509b174cc1752596a61c44469a4ecf642ccd9",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba8cc1f7_55ffbc34",
        "filename": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/stream/DDSNormalizedNodeStreamWriter.java",
        "patchSetId": 4
      },
      "lineNbr": 247,
      "author": {
        "id": 1903
      },
      "writtenOn": "2014-10-24T15:31:06Z",
      "side": 1,
      "message": "Should i change the older class, which will impact older code too, or write a new one, that will be used for streaming only? OR u mean just cast int to byte because that does not affect anything?",
      "parentUuid": "ba8cc1f7_15d8541c",
      "revId": "98c509b174cc1752596a61c44469a4ecf642ccd9",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba8cc1f7_b563a819",
        "filename": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/stream/DDSNormalizedNodeStreamWriter.java",
        "patchSetId": 4
      },
      "lineNbr": 247,
      "author": {
        "id": 1842
      },
      "writtenOn": "2014-10-24T16:12:29Z",
      "side": 1,
      "message": "Hmm... I imagine the older code might be deprecated in favor of this code but the enum classes are general so I imagine we\u0027d keep them. It\u0027s easiest to cast ordinal to a byte - that\u0027s safe, as long as we don\u0027t exceed 255 enums :).",
      "parentUuid": "ba8cc1f7_55ffbc34",
      "revId": "98c509b174cc1752596a61c44469a4ecf642ccd9",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba8cc1f7_95ec64c9",
        "filename": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/stream/DDSNormalizedNodeStreamWriter.java",
        "patchSetId": 4
      },
      "lineNbr": 314,
      "author": {
        "id": 1842
      },
      "writtenOn": "2014-10-24T13:56:22Z",
      "side": 1,
      "message": "Similar to NodeTypes, we can save space by writing a single byte instead of the ordinal.",
      "revId": "98c509b174cc1752596a61c44469a4ecf642ccd9",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba8cc1f7_55cedc5b",
        "filename": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/stream/DDSNormalizedNodeStreamWriter.java",
        "patchSetId": 4
      },
      "lineNbr": 337,
      "author": {
        "id": 1842
      },
      "writtenOn": "2014-10-24T13:56:22Z",
      "side": 1,
      "message": "We\u0027ve already called ValueType.getSerializableType above to get the type code so we can use that in a switch statement here which would be more efficient than checking instanceof.",
      "revId": "98c509b174cc1752596a61c44469a4ecf642ccd9",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}