{
  "comments": [
    {
      "key": {
        "uuid": "fa9f7124_fb16839d",
        "filename": "opendaylight/md-sal/sal-akka-raft/src/main/java/org/opendaylight/controller/cluster/raft/PeerAddressResolver.java",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 649
      },
      "writtenOn": "2019-01-03T13:06:25Z",
      "side": 1,
      "message": "Multiple issues here:\n\nDoes the default implementation imply that the semantics of this method is to provide advice and implementations are free to disregard it in case of conflicts?\n\nI do not like turning an immutable aspect into a mutator -- i.e. resolve() is a request which is completely disconnected from how it is implemented. Users of resolve() should not care how resolution is done. Yet setResolved() means any user can call it and implementations must account for this method being called.\n\nIn any case, full implementations contradict @FunctionalInterface and that should be dropped then.",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 34,
        "endChar": 5
      },
      "revId": "98298ff7383b06f4380a6ae0137b32af50663ec6",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7cafffe9_1f92eed5",
        "filename": "opendaylight/md-sal/sal-akka-raft/src/main/java/org/opendaylight/controller/cluster/raft/PeerAddressResolver.java",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1842
      },
      "writtenOn": "2019-01-03T14:32:59Z",
      "side": 1,
      "message": "I know this is an unfortunate workaround hack for akka weirdness but somehow we have to propagate the address to the ShardManager if akka clustering doesn\u0027t notify the ShardManager as it should. There\u0027s other ways to do it but none are really clean - IMO this was the simplest way and least ugly. This really isn\u0027t a wide-open public interface anyway - there\u0027s really only one implementation (except for the no-op one for UTs) and, in reality, there never will be another implementation.\n\nIf you\u0027re really against this then what would you suggest as an alternative?",
      "parentUuid": "fa9f7124_fb16839d",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 34,
        "endChar": 5
      },
      "revId": "98298ff7383b06f4380a6ae0137b32af50663ec6",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6626767c_b7e93b02",
        "filename": "opendaylight/md-sal/sal-akka-raft/src/main/java/org/opendaylight/controller/cluster/raft/messages/AppendEntries.java",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 649
      },
      "writtenOn": "2019-01-03T13:06:25Z",
      "side": 1,
      "message": "nullable String, as per Optional usage guidelines.",
      "range": {
        "startLine": 61,
        "startChar": 18,
        "endLine": 61,
        "endChar": 34
      },
      "revId": "98298ff7383b06f4380a6ae0137b32af50663ec6",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e0385eb3_5f746df8",
        "filename": "opendaylight/md-sal/sal-akka-raft/src/main/java/org/opendaylight/controller/cluster/raft/messages/AppendEntries.java",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 1842
      },
      "writtenOn": "2019-01-03T14:32:59Z",
      "side": 1,
      "message": "You mean store as String? I guess that would mean passing @Nullable String into the ctor. Why? Optional is supposed to be the better alternative to @Nullable  X.",
      "parentUuid": "6626767c_b7e93b02",
      "range": {
        "startLine": 61,
        "startChar": 18,
        "endLine": 61,
        "endChar": 34
      },
      "revId": "98298ff7383b06f4380a6ae0137b32af50663ec6",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08361a63_1cff15f0",
        "filename": "opendaylight/md-sal/sal-akka-raft/src/main/java/org/opendaylight/controller/cluster/raft/messages/AppendEntries.java",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 649
      },
      "writtenOn": "2019-01-03T17:48:48Z",
      "side": 1,
      "message": "It is a better alternative as a return value of a method, not for fields -- see https://stackoverflow.com/questions/23454952/uses-for-optional/23464794#23464794\n\nNote that JIT + Escape Analysis really blurs what it means to allocate an object in hot paths.\n\nIn this case, I think the common case is absent address -- which is reusing a singleton anyway.",
      "parentUuid": "e0385eb3_5f746df8",
      "range": {
        "startLine": 61,
        "startChar": 18,
        "endLine": 61,
        "endChar": 34
      },
      "revId": "98298ff7383b06f4380a6ae0137b32af50663ec6",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e6875a8d_01bbcbba",
        "filename": "opendaylight/md-sal/sal-akka-raft/src/main/java/org/opendaylight/controller/cluster/raft/messages/AppendEntries.java",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 1842
      },
      "writtenOn": "2019-01-04T19:04:02Z",
      "side": 1,
      "message": "done",
      "parentUuid": "e0385eb3_5f746df8",
      "range": {
        "startLine": 61,
        "startChar": 18,
        "endLine": 61,
        "endChar": 34
      },
      "revId": "98298ff7383b06f4380a6ae0137b32af50663ec6",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6b0fb082_fadf67d8",
        "filename": "opendaylight/md-sal/sal-akka-raft/src/main/java/org/opendaylight/controller/cluster/raft/messages/AppendEntries.java",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 1842
      },
      "writtenOn": "2019-01-04T19:04:02Z",
      "side": 1,
      "message": "done",
      "parentUuid": "6626767c_b7e93b02",
      "range": {
        "startLine": 61,
        "startChar": 18,
        "endLine": 61,
        "endChar": 34
      },
      "revId": "98298ff7383b06f4380a6ae0137b32af50663ec6",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7f1171d_d04e052d",
        "filename": "opendaylight/md-sal/sal-akka-raft/src/main/java/org/opendaylight/controller/cluster/raft/messages/AppendEntries.java",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 1842
      },
      "writtenOn": "2019-01-04T19:04:02Z",
      "side": 1,
      "message": "done",
      "parentUuid": "08361a63_1cff15f0",
      "range": {
        "startLine": 61,
        "startChar": 18,
        "endLine": 61,
        "endChar": 34
      },
      "revId": "98298ff7383b06f4380a6ae0137b32af50663ec6",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9e750adb_09fa9871",
        "filename": "opendaylight/md-sal/sal-akka-raft/src/main/java/org/opendaylight/controller/cluster/raft/messages/AppendEntries.java",
        "patchSetId": 3
      },
      "lineNbr": 125,
      "author": {
        "id": 649
      },
      "writtenOn": "2019-01-03T13:06:25Z",
      "side": 1,
      "message": "Optional.ofNullable(leaderAddress)",
      "range": {
        "startLine": 125,
        "startChar": 15,
        "endLine": 125,
        "endChar": 28
      },
      "revId": "98298ff7383b06f4380a6ae0137b32af50663ec6",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8407f4c_553efe46",
        "filename": "opendaylight/md-sal/sal-akka-raft/src/main/java/org/opendaylight/controller/cluster/raft/messages/AppendEntries.java",
        "patchSetId": 3
      },
      "lineNbr": 125,
      "author": {
        "id": 1842
      },
      "writtenOn": "2019-01-03T14:32:59Z",
      "side": 1,
      "message": "Why incur the overhead of creating an Optional on every call in lieu of storing as Optional?",
      "parentUuid": "9e750adb_09fa9871",
      "range": {
        "startLine": 125,
        "startChar": 15,
        "endLine": 125,
        "endChar": 28
      },
      "revId": "98298ff7383b06f4380a6ae0137b32af50663ec6",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9e63859c_3d99c189",
        "filename": "opendaylight/md-sal/sal-akka-raft/src/main/java/org/opendaylight/controller/cluster/raft/messages/AppendEntries.java",
        "patchSetId": 3
      },
      "lineNbr": 153,
      "author": {
        "id": 649
      },
      "writtenOn": "2019-01-03T13:06:25Z",
      "side": 1,
      "message": "ProxyV2 to be consistent with cds-access-api.",
      "range": {
        "startLine": 153,
        "startChar": 25,
        "endLine": 153,
        "endChar": 31
      },
      "revId": "98298ff7383b06f4380a6ae0137b32af50663ec6",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "797cbf00_293314e5",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/shardmanager/ShardPeerAddressResolver.java",
        "patchSetId": 3
      },
      "lineNbr": 102,
      "author": {
        "id": 649
      },
      "writtenOn": "2019-01-03T13:06:25Z",
      "side": 1,
      "message": "setResolved() contract is unclear here: given asynchronous resolution through two channels (the other being addPeerAddress() path), how do these interact.\n\nFor addPeerAddress() we have a clear policy, but this is coming from a different source outside of the package -- should it really overwrite the address set via addPeerAddress()?\n\nIf so, this method should be calling addPeerAddress(). If not, this method should use putIfAbsent().",
      "range": {
        "startLine": 101,
        "startChar": 8,
        "endLine": 102,
        "endChar": 53
      },
      "revId": "98298ff7383b06f4380a6ae0137b32af50663ec6",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff6eab0e_0f7777dc",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/shardmanager/ShardPeerAddressResolver.java",
        "patchSetId": 3
      },
      "lineNbr": 102,
      "author": {
        "id": 1842
      },
      "writtenOn": "2019-01-03T14:32:59Z",
      "side": 1,
      "message": "\u003e setResolved() contract is unclear here: given asynchronous\n \u003e resolution through two channels (the other being addPeerAddress()\n \u003e path), how do these interact.\n \u003e \n \u003e For addPeerAddress() we have a clear policy, but this is coming\n \u003e from a different source outside of the package -- should it really\n \u003e overwrite the address set via addPeerAddress()?\n\nIn reality we get here b/c addPeerAddress() was not previously called via akka Member* event. Either way the address will be the same coming from both sources (ie akka). \n\n \u003e \n \u003e If so, this method should be calling addPeerAddress(). If not, this\n \u003e method should use putIfAbsent().\n\nsure",
      "parentUuid": "797cbf00_293314e5",
      "range": {
        "startLine": 101,
        "startChar": 8,
        "endLine": 102,
        "endChar": 53
      },
      "revId": "98298ff7383b06f4380a6ae0137b32af50663ec6",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}