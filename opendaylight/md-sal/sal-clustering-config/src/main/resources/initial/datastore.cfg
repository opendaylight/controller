# This file specifies property settings for the clustered data store to control its behavior. A
# property may be applied to every data store type ("config" and "operational") or can be customized 
# differently for each data store type. For example, specifying the "shardElectionTimeoutFactor"
# property would be applied to both data stores whereas specifying "operationalShardElectionTimeoutFactor"
# would only apply to the "operational" data store. Similarly, specifying "configShardElectionTimeoutFactor"
# would only apply to the "config" data store.

# The multiplication factor to be used to determine shard election timeout. The shard election timeout
# is determined by multiplying shardHeartbeatIntervalInMillis with the shardElectionTimeoutFactor.
#shardElectionTimeoutFactor=2

# The interval at which a shard will send a heart beat message to its remote shard.
#shardHeartbeatIntervalInMillis=500

# The maximum amount of time to wait for a shard to elect a leader before failing an operation (eg transaction create).
#shardLeaderElectionTimeoutInSeconds=30

# Enable or disable data persistence.
#persistent=true

# Disable persistence for the operational data store by default.
operationalPersistent=false

# The maximum amount of time a shard transaction can be idle without receiving any messages before it self-destructs.
#shardTransactionIdleTimeoutInMinutes=10

# The maximum amount of time a shard transaction three-phase commit can be idle without receiving the 
# next messages before it aborts the transaction.
#shardTransactionCommitTimeoutInSeconds=30

# The maximum allowed capacity for each shard's transaction commit queue.
#shardTransactionCommitQueueCapacity=20000

# The maximum amount of time to wait for a shard to initialize from persistence on startup before 
# failing an operation (eg transaction create and change listener registration).
#shardInitializationTimeoutInSeconds=300

# The minimum number of entries to be present in the in-memory journal log before a snapshot is to be taken.
#shardJournalRecoveryLogBatchSize=5000

# The minimum number of entries to be present in the in-memory journal log before a snapshot is to be taken.
#shardSnapshotBatchCount=20000

# The percentage of Runtime.totalMemory() used by the in-memory journal log before a snapshot is to be taken.
#shardSnapshotDataThresholdPercentage=12

# The interval at which the leader of the shard will check if its majority  followers are active and 
# term itself as isolated.
#shardIsolatedLeaderCheckIntervalInMillis=5000

# The maximum amount of time for akka operations (remote or local) to complete before failing.
#operationTimeoutInSeconds=5

# The initial number of transactions per second that are allowed before the data store should begin 
# applying back pressure. This number is only used as an initial guidance, subsequently the datastore 
# measures the latency for a commit and auto-adjusts the rate limit.
#transactionCreationInitialRateLimit=100

# The maximum thread pool size for each shard's data store data change notification executor.
#maxShardDataChangeExecutorPoolSize=20

# The maximum queue size for each shard's data store data change notification executor.
#maxShardDataChangeExecutorQueueSize=1000

# The maximum queue size for each shard's data store data change listener.
#maxShardDataChangeListenerQueueSize=1000

# The maximum queue size for each shard's data store executor.
#maxShardDataStoreExecutorQueueSize=5000

