package org.opendaylight.controller.mdsal;

import "Common.proto";

option java_package = "org.opendaylight.controller.protobuff.messages.registration";
option java_outer_classname = "ListenerRegistrationMessages";

/** used when a listener needs to be unregistered*/
message CloseDataChangeListenerRegistration {

}
/** reply to the CloseDataChangeListenerRegistration request*/
message CloseDataChangeListenerRegistrationReply{

}

/** used when a tree listener needs to be unregistered*/
message CloseDataTreeChangeListenerRegistration {

}
/** reply to the CloseDataTreeChangeListenerRegistration request*/
message CloseDataTreeChangeListenerRegistrationReply{

}

/**
 * When registering a listener at particular level of tree
 * identified by instanceIdentifierPath.
 * dataChangeListenerActorPath is path to actor that will
 * receive the change event
 * scope is the data change scope like BASE,ONE and SUBTREE
 * defined in AsyncDataBroker.DataChangeScope
 */
message RegisterChangeListener{
required InstanceIdentifier instanceIdentifierPath=1;
required string dataChangeListenerActorPath=2;
required int32 dataChangeScope=3;
}

/**
 * When registering a listener at particular level of tree
 * identified by instanceIdentifierPath.
 * dataTreeChangeListenerActorPath is path to actor that will
 * receive the tree change event
 */
message RegisterTreeChangeListener{
required InstanceIdentifier instanceIdentifierPath=1;
required string dataTreeChangeListenerActorPath=2;
}

/**
 * This is the reply for the RegisterChangeListener and
 * RegisterTreeChangeListener messages.
 * It contains the listenerRegistration actor path
 * that can be used to unregister the listener
 */
message RegisterChangeListenerReply{
required string listenerRegistrationPath=1;

}

