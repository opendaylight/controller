/*
 * Copyright (c) 2014 Cisco Systems, Inc. and others.  All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */
/**
 * Generated file

 * Generated from: yang module name: opendaylight-sal-binding-broker-impl  yang module local name: binding-broker-impl
 * Generated by: org.opendaylight.controller.config.yangjmxgenerator.plugin.JMXGenerator
 * Generated at: Wed Nov 20 17:33:01 CET 2013
 *
 * Do not modify this file unless it is present under src/main directory
 */
package org.opendaylight.controller.config.yang.md.sal.binding.impl;

import org.opendaylight.controller.md.sal.binding.api.DataBroker;
import org.opendaylight.controller.md.sal.binding.api.MountPointService;
import org.opendaylight.controller.md.sal.binding.api.NotificationPublishService;
import org.opendaylight.controller.md.sal.binding.compat.HydrogenMountProvisionServiceAdapter;
import org.opendaylight.controller.sal.binding.api.NotificationProviderService;
import org.opendaylight.controller.sal.binding.api.RpcProviderRegistry;
import org.opendaylight.controller.sal.binding.api.mount.MountProviderService;
import org.opendaylight.controller.sal.binding.impl.RootBindingAwareBroker;
import org.opendaylight.controller.sal.common.util.osgi.OsgiServiceUtils;
import org.osgi.framework.BundleContext;

/**
*
*/
public final class BindingBrokerImplModule extends
        org.opendaylight.controller.config.yang.md.sal.binding.impl.AbstractBindingBrokerImplModule {
    private BundleContext bundleContext;

    public BindingBrokerImplModule(final org.opendaylight.controller.config.api.ModuleIdentifier identifier,
            final org.opendaylight.controller.config.api.DependencyResolver dependencyResolver) {
        super(identifier, dependencyResolver);
    }

    public BindingBrokerImplModule(final org.opendaylight.controller.config.api.ModuleIdentifier identifier,
            final org.opendaylight.controller.config.api.DependencyResolver dependencyResolver,
            final BindingBrokerImplModule oldModule, final java.lang.AutoCloseable oldInstance) {
        super(identifier, dependencyResolver, oldModule, oldInstance);
    }

    @Override
    public void validate() {
        super.validate();
    }

    @Override
    public RootBindingAwareBroker createInstance() {
        // The services are provided via blueprint so retrieve then from the OSGi service registry for
        // backwards compatibility.

        final MountPointService mountPointService = OsgiServiceUtils.waitForService(
                MountPointService.class, bundleContext, OsgiServiceUtils.FIVE_MINUTES, null);

        final RpcProviderRegistry rpcProviderRegistry = OsgiServiceUtils.waitForService(
                RpcProviderRegistry.class, bundleContext, OsgiServiceUtils.FIVE_MINUTES, null);

        final DataBroker dataBroker = OsgiServiceUtils.waitForService(
                DataBroker.class, bundleContext, OsgiServiceUtils.FIVE_MINUTES, null);

        final NotificationProviderService notificationProviderService = OsgiServiceUtils.waitForService(
                NotificationProviderService.class, bundleContext, OsgiServiceUtils.FIVE_MINUTES, null);

        final NotificationPublishService notificationPublishService = OsgiServiceUtils.waitForService(
                NotificationPublishService.class, bundleContext, OsgiServiceUtils.FIVE_MINUTES, null);

        final RootBindingAwareBroker broker = new RootBindingAwareBroker(getIdentifier().getInstanceName());
        final MountProviderService legacyMount = createLegacyMountPointService(mountPointService);

        broker.setLegacyDataBroker(getDataBrokerDependency());

        broker.setNotificationBroker(notificationProviderService);
        broker.setNotificationPublishService(notificationPublishService);
        broker.setRpcBroker(rpcProviderRegistry);
        broker.setDataBroker(dataBroker);
        broker.setMountService(mountPointService);
        broker.setLegacyMountManager(legacyMount);
        broker.start();
        return broker;
    }

    public void setBundleContext(final BundleContext bundleContext) {
        this.bundleContext = bundleContext;
    }

    @SuppressWarnings("deprecation")
    private MountProviderService createLegacyMountPointService(final MountPointService service) {
        if(service != null) {
            return new HydrogenMountProvisionServiceAdapter(service);
        }
        return null;
    }
}
