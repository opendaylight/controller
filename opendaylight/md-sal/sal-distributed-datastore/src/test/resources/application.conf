akka {
    persistence.snapshot-store.plugin = "in-memory-snapshot-store"
    persistence.journal.plugin = "in-memory-journal"

    loggers = ["akka.testkit.TestEventListener", "akka.event.slf4j.Slf4jLogger"]

    actor {
    }
}

in-memory-journal {
    class = "org.opendaylight.controller.cluster.raft.utils.InMemoryJournal"
}

in-memory-snapshot-store {
  # Class name of the plugin.
  class = "org.opendaylight.controller.cluster.raft.utils.InMemorySnapshotStore"
  # Dispatcher for the plugin actor.
  plugin-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"
}

bounded-mailbox {
  mailbox-type = "org.opendaylight.controller.cluster.common.actor.MeteredBoundedMailbox"
  mailbox-capacity = 1000
  mailbox-push-timeout-time = 100ms
}

test {
  bounded-mailbox {
    mailbox-type = "org.opendaylight.controller.cluster.common.actor.MeteredBoundedMailbox"
    mailbox-capacity = 1000
    mailbox-push-timeout-time = 100ms
  }

  in-memory-journal {
    class = "org.opendaylight.controller.cluster.raft.utils.InMemoryJournal"
  }

  in-memory-snapshot-store {
    class = "org.opendaylight.controller.cluster.raft.utils.InMemorySnapshotStore"
    plugin-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"
  }

  shard-dispatcher {
    type = Dispatcher
    executor = "default-executor"
    mailbox-type = "org.opendaylight.controller.cluster.common.actor.UnboundedDequeBasedControlAwareMailbox"
  }

  akka {
    persistence.snapshot-store.plugin = "in-memory-snapshot-store"
    persistence.journal.plugin = "in-memory-journal"

    loglevel = "INFO"

    actor {
      provider = "akka.cluster.ClusterActorRefProvider"

      serializers {
          readylocal = "org.opendaylight.controller.cluster.datastore.messages.ReadyLocalTransactionSerializer"
      }

      serialization-bindings {
          "org.opendaylight.controller.cluster.datastore.messages.ReadyLocalTransaction" = readylocal
      }
    }
    remote {
      log-remote-lifecycle-events = off
      artery {
        enabled = on
        canonical.hostname = "127.0.0.1"
        canonical.port = 2565
      }

      netty.tcp {
        hostname = "127.0.0.1"
        port = 2565
      }
    }

    cluster {
      auto-down-unreachable-after = 100s
      retry-unsuccessful-join-after = 100ms

      roles = [
        "member-1"
      ]
    }
  }
}

Member1 {
  bounded-mailbox {
    mailbox-type = "org.opendaylight.controller.cluster.common.actor.MeteredBoundedMailbox"
    mailbox-capacity = 1000
    mailbox-push-timeout-time = 100ms
  }

  in-memory-journal {
    class = "org.opendaylight.controller.cluster.raft.utils.InMemoryJournal"
  }

  in-memory-snapshot-store {
    class = "org.opendaylight.controller.cluster.raft.utils.InMemorySnapshotStore"
    plugin-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"
  }

  shard-dispatcher {
    type = Dispatcher
    executor = "default-executor"
    mailbox-type = "org.opendaylight.controller.cluster.common.actor.UnboundedDequeBasedControlAwareMailbox"
  }

  akka {
    persistence.snapshot-store.plugin = "in-memory-snapshot-store"
    persistence.journal.plugin = "in-memory-journal"

    loglevel = "INFO"

    actor {
      provider = "akka.cluster.ClusterActorRefProvider"

      serializers {
          readylocal = "org.opendaylight.controller.cluster.datastore.messages.ReadyLocalTransactionSerializer"
      }

      serialization-bindings {
          "org.opendaylight.controller.cluster.datastore.messages.ReadyLocalTransaction" = readylocal
      }
    }
    remote {
      log-remote-lifecycle-events = off
      artery {
        enabled = on
        canonical.hostname = "127.0.0.1"
        canonical.port = 2558
      }

      netty.tcp {
        hostname = "127.0.0.1"
        port = 2558
      }
    }

    cluster {
      retry-unsuccessful-join-after = 100ms

      roles = [
        "member-1"
      ]
    }
  }
}

Member2 {
  bounded-mailbox {
    mailbox-type = "org.opendaylight.controller.cluster.common.actor.MeteredBoundedMailbox"
    mailbox-capacity = 1000
    mailbox-push-timeout-time = 100ms
  }

  in-memory-journal {
    class = "org.opendaylight.controller.cluster.raft.utils.InMemoryJournal"
  }

  in-memory-snapshot-store {
    class = "org.opendaylight.controller.cluster.raft.utils.InMemorySnapshotStore"
    plugin-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"
  }

  shard-dispatcher {
    type = Dispatcher
    executor = "default-executor"
    mailbox-type = "org.opendaylight.controller.cluster.common.actor.UnboundedDequeBasedControlAwareMailbox"
  }

  akka {
    persistence.snapshot-store.plugin = "in-memory-snapshot-store"
    persistence.journal.plugin = "in-memory-journal"

    actor {
      provider = "akka.cluster.ClusterActorRefProvider"

      serializers {
          readylocal = "org.opendaylight.controller.cluster.datastore.messages.ReadyLocalTransactionSerializer"
      }

      serialization-bindings {
          "org.opendaylight.controller.cluster.datastore.messages.ReadyLocalTransaction" = readylocal
      }
    }
    remote {
      log-remote-lifecycle-events = off
      artery {
        enabled = on
        canonical.hostname = "127.0.0.1"
        canonical.port = 2559
      }

      netty.tcp {
        hostname = "127.0.0.1"
        port = 2559
      }
    }

    cluster {
      retry-unsuccessful-join-after = 100ms

      roles = [
        "member-2"
      ]
    }
  }
}

Member3 {
  bounded-mailbox {
    mailbox-type = "org.opendaylight.controller.cluster.common.actor.MeteredBoundedMailbox"
    mailbox-capacity = 1000
    mailbox-push-timeout-time = 100ms
  }

  in-memory-journal {
    class = "org.opendaylight.controller.cluster.raft.utils.InMemoryJournal"
  }

  in-memory-snapshot-store {
    class = "org.opendaylight.controller.cluster.raft.utils.InMemorySnapshotStore"
    plugin-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"
  }

  shard-dispatcher {
    type = Dispatcher
    executor = "default-executor"
    mailbox-type = "org.opendaylight.controller.cluster.common.actor.UnboundedDequeBasedControlAwareMailbox"
  }

  akka {
    persistence.snapshot-store.plugin = "in-memory-snapshot-store"
    persistence.journal.plugin = "in-memory-journal"

    loglevel = "INFO"

    actor {
      provider = "akka.cluster.ClusterActorRefProvider"

      serializers {
          readylocal = "org.opendaylight.controller.cluster.datastore.messages.ReadyLocalTransactionSerializer"
      }

      serialization-bindings {
          "org.opendaylight.controller.cluster.datastore.messages.ReadyLocalTransaction" = readylocal
      }
    }
    remote {
      log-remote-lifecycle-events = off
      artery {
        enabled = on
        canonical.hostname = "127.0.0.1"
        canonical.port = 2557
      }

      netty.tcp {
        hostname = "127.0.0.1"
        port = 2557
      }
    }

    cluster {
      retry-unsuccessful-join-after = 100ms

      roles = [
        "member-3"
      ]
    }
  }
}

Member4 {
  bounded-mailbox {
    mailbox-type = "org.opendaylight.controller.cluster.common.actor.MeteredBoundedMailbox"
    mailbox-capacity = 1000
    mailbox-push-timeout-time = 100ms
  }

  in-memory-journal {
    class = "org.opendaylight.controller.cluster.raft.utils.InMemoryJournal"
  }

  in-memory-snapshot-store {
    class = "org.opendaylight.controller.cluster.raft.utils.InMemorySnapshotStore"
    plugin-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"
  }

  shard-dispatcher {
    type = Dispatcher
    executor = "default-executor"
    mailbox-type = "org.opendaylight.controller.cluster.common.actor.UnboundedDequeBasedControlAwareMailbox"
  }

  akka {
    persistence.snapshot-store.plugin = "in-memory-snapshot-store"
    persistence.journal.plugin = "in-memory-journal"

    loglevel = "INFO"

    actor {
      provider = "akka.cluster.ClusterActorRefProvider"

      serializers {
          readylocal = "org.opendaylight.controller.cluster.datastore.messages.ReadyLocalTransactionSerializer"
      }

      serialization-bindings {
          "org.opendaylight.controller.cluster.datastore.messages.ReadyLocalTransaction" = readylocal
      }
    }
    remote {
      log-remote-lifecycle-events = off
      artery {
        enabled = on
        canonical.hostname = "127.0.0.1"
        canonical.port = 2560
      }

      netty.tcp {
        hostname = "127.0.0.1"
        port = 2560
      }
    }

    cluster {
      retry-unsuccessful-join-after = 100ms

      roles = [
        "member-4"
      ]
    }
  }
}

Member5 {
  bounded-mailbox {
    mailbox-type = "org.opendaylight.controller.cluster.common.actor.MeteredBoundedMailbox"
    mailbox-capacity = 1000
    mailbox-push-timeout-time = 100ms
  }

  in-memory-journal {
    class = "org.opendaylight.controller.cluster.raft.utils.InMemoryJournal"
  }

  in-memory-snapshot-store {
    class = "org.opendaylight.controller.cluster.raft.utils.InMemorySnapshotStore"
    plugin-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"
  }

  shard-dispatcher {
    type = Dispatcher
    executor = "default-executor"
    mailbox-type = "org.opendaylight.controller.cluster.common.actor.UnboundedDequeBasedControlAwareMailbox"
  }

  akka {
    persistence.snapshot-store.plugin = "in-memory-snapshot-store"
    persistence.journal.plugin = "in-memory-journal"

    loglevel = "INFO"

    actor {
      provider = "akka.cluster.ClusterActorRefProvider"

      serializers {
          readylocal = "org.opendaylight.controller.cluster.datastore.messages.ReadyLocalTransactionSerializer"
      }

      serialization-bindings {
          "org.opendaylight.controller.cluster.datastore.messages.ReadyLocalTransaction" = readylocal
      }
    }
    remote {
      log-remote-lifecycle-events = off
      artery {
        enabled = on
        canonical.hostname = "127.0.0.1"
        canonical.port = 2561
      }

      netty.tcp {
        hostname = "127.0.0.1"
        port = 2561
      }
    }

    cluster {
      retry-unsuccessful-join-after = 100ms

      roles = [
        "member-5"
      ]
    }
  }
}

Member1-without-artery {
  akka.remote.artery.enabled = off
}

Member2-without-artery {
  akka.remote.artery.enabled = off
}

Member3-without-artery {
  akka.remote.artery.enabled = off
}

Member4-without-artery {
  akka.remote.artery.enabled = off
}

Member5-without-artery {
  akka.remote.artery.enabled = off
}
