{
    "apiVersion" : "1.0.0",
    "swaggerVersion" : "1.2",
    "basePath" : "http://10.195.128.107:8080/restconf",
    "resourcePath" : null,
    "produces" : [ "application/json", "application/xml" ],
    "apis" : [ {
        "path" : "/operational/network-topology:network-topology",
        "operations" : [ {
            "method" : "GET",
            "summary" : null,
            "notes" : null,
            "type" : "network-topology",
            "nickname" : "GET-network-topology",
            "consumes" : null,
            "parameters" : [ ],
            "responseMessages" : null
        } ]
    }, {
        "path" : "/operational/network-topology:network-topology/topology/{topology-id}",
        "operations" : [ {
            "method" : "GET",
            "summary" : null,
            "notes" : "\n                This is the model of an abstract topology.\n                A topology contins nodes and links.  \n                Each topology MUST be identified by\n                unique topology-id for reason that a network could contain many\n                topologies.\n            ",
            "type" : "topology",
            "nickname" : "GET-topology",
            "consumes" : null,
            "parameters" : [ {
                "name" : "topology-id",
                "description" : "\n                    It is presumed that a datastore will contain many topologies. To\n                    distinguish between topologies it is vital to have UNIQUE\n                    topology identifiers.\n                ",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            } ],
            "responseMessages" : null
        } ]
    }, {
        "path" : "/operational/network-topology:network-topology/topology/{topology-id}/link/{link-id}",
        "operations" : [ {
            "method" : "GET",
            "summary" : null,
            "notes" : "\n                    A Network Link connects a by Local (Source) node and\n                    a Remote (Destination) Network Nodes via a set of the \n                    nodes' termination points. \n                    As it is possible to have several links between the same\n                    source and destination nodes, and as a link could potentially\n                    be re-homed between termination points, to ensure that we \n                    would always know to distinguish between links, every link \n                    is identified by a dedicated link identifier.  \n                    Note that a link models a point-to-point link, not a multipoint\n                    link.  \n                    Layering dependencies on links in underlay topologies are\n                    not represented as the layering information of nodes and of \n                    termination points is sufficient.  \n                ",
            "type" : "link",
            "nickname" : "GET-link",
            "consumes" : null,
            "parameters" : [ {
                "name" : "topology-id",
                "description" : "\n                    It is presumed that a datastore will contain many topologies. To\n                    distinguish between topologies it is vital to have UNIQUE\n                    topology identifiers.\n                ",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            }, {
                "name" : "link-id",
                "description" : "The identifier of a link in the topology.  \n                A link is specific to a topology to which it belongs.",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            } ],
            "responseMessages" : null
        } ]
    }, {
        "path" : "/operational/network-topology:network-topology/topology/{topology-id}/link/{link-id}/destination",
        "operations" : [ {
            "method" : "GET",
            "summary" : null,
            "notes" : null,
            "type" : "destination",
            "nickname" : "GET-destination",
            "consumes" : null,
            "parameters" : [ {
                "name" : "topology-id",
                "description" : "\n                    It is presumed that a datastore will contain many topologies. To\n                    distinguish between topologies it is vital to have UNIQUE\n                    topology identifiers.\n                ",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            }, {
                "name" : "link-id",
                "description" : "The identifier of a link in the topology.  \n                A link is specific to a topology to which it belongs.",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            } ],
            "responseMessages" : null
        } ]
    }, {
        "path" : "/operational/network-topology:network-topology/topology/{topology-id}/link/{link-id}/destination/dest-node",
        "operations" : [ {
            "method" : "GET",
            "summary" : null,
            "notes" : "Destination node identifier, must be in same topology.",
            "type" : "dest-node",
            "nickname" : "GET-dest-node",
            "consumes" : null,
            "parameters" : [ {
                "name" : "topology-id",
                "description" : "\n                    It is presumed that a datastore will contain many topologies. To\n                    distinguish between topologies it is vital to have UNIQUE\n                    topology identifiers.\n                ",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            }, {
                "name" : "link-id",
                "description" : "The identifier of a link in the topology.  \n                A link is specific to a topology to which it belongs.",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            } ],
            "responseMessages" : null
        } ]
    }, {
        "path" : "/operational/network-topology:network-topology/topology/{topology-id}/link/{link-id}/destination/dest-tp",
        "operations" : [ {
            "method" : "GET",
            "summary" : null,
            "notes" : "Termination point within destination node that terminates the link.",
            "type" : "dest-tp",
            "nickname" : "GET-dest-tp",
            "consumes" : null,
            "parameters" : [ {
                "name" : "topology-id",
                "description" : "\n                    It is presumed that a datastore will contain many topologies. To\n                    distinguish between topologies it is vital to have UNIQUE\n                    topology identifiers.\n                ",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            }, {
                "name" : "link-id",
                "description" : "The identifier of a link in the topology.  \n                A link is specific to a topology to which it belongs.",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            } ],
            "responseMessages" : null
        } ]
    }, {
        "path" : "/operational/network-topology:network-topology/topology/{topology-id}/link/{link-id}/link-id",
        "operations" : [ {
            "method" : "GET",
            "summary" : null,
            "notes" : "The identifier of a link in the topology.  \n                A link is specific to a topology to which it belongs.",
            "type" : "link-id",
            "nickname" : "GET-link-id",
            "consumes" : null,
            "parameters" : [ {
                "name" : "topology-id",
                "description" : "\n                    It is presumed that a datastore will contain many topologies. To\n                    distinguish between topologies it is vital to have UNIQUE\n                    topology identifiers.\n                ",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            }, {
                "name" : "link-id",
                "description" : "The identifier of a link in the topology.  \n                A link is specific to a topology to which it belongs.",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            } ],
            "responseMessages" : null
        } ]
    }, {
        "path" : "/operational/network-topology:network-topology/topology/{topology-id}/link/{link-id}/source",
        "operations" : [ {
            "method" : "GET",
            "summary" : null,
            "notes" : null,
            "type" : "source",
            "nickname" : "GET-source",
            "consumes" : null,
            "parameters" : [ {
                "name" : "topology-id",
                "description" : "\n                    It is presumed that a datastore will contain many topologies. To\n                    distinguish between topologies it is vital to have UNIQUE\n                    topology identifiers.\n                ",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            }, {
                "name" : "link-id",
                "description" : "The identifier of a link in the topology.  \n                A link is specific to a topology to which it belongs.",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            } ],
            "responseMessages" : null
        } ]
    }, {
        "path" : "/operational/network-topology:network-topology/topology/{topology-id}/link/{link-id}/source/source-node",
        "operations" : [ {
            "method" : "GET",
            "summary" : null,
            "notes" : "Source node identifier, must be in same topology.",
            "type" : "source-node",
            "nickname" : "GET-source-node",
            "consumes" : null,
            "parameters" : [ {
                "name" : "topology-id",
                "description" : "\n                    It is presumed that a datastore will contain many topologies. To\n                    distinguish between topologies it is vital to have UNIQUE\n                    topology identifiers.\n                ",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            }, {
                "name" : "link-id",
                "description" : "The identifier of a link in the topology.  \n                A link is specific to a topology to which it belongs.",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            } ],
            "responseMessages" : null
        } ]
    }, {
        "path" : "/operational/network-topology:network-topology/topology/{topology-id}/link/{link-id}/source/source-tp",
        "operations" : [ {
            "method" : "GET",
            "summary" : null,
            "notes" : "Termination point within source node that terminates the link.",
            "type" : "source-tp",
            "nickname" : "GET-source-tp",
            "consumes" : null,
            "parameters" : [ {
                "name" : "topology-id",
                "description" : "\n                    It is presumed that a datastore will contain many topologies. To\n                    distinguish between topologies it is vital to have UNIQUE\n                    topology identifiers.\n                ",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            }, {
                "name" : "link-id",
                "description" : "The identifier of a link in the topology.  \n                A link is specific to a topology to which it belongs.",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            } ],
            "responseMessages" : null
        } ]
    }, {
        "path" : "/operational/network-topology:network-topology/topology/{topology-id}/link/{link-id}/supporting-link/{link-ref}",
        "operations" : [ {
            "method" : "GET",
            "summary" : null,
            "notes" : null,
            "type" : "supporting-link",
            "nickname" : "GET-supporting-link",
            "consumes" : null,
            "parameters" : [ {
                "name" : "topology-id",
                "description" : "\n                    It is presumed that a datastore will contain many topologies. To\n                    distinguish between topologies it is vital to have UNIQUE\n                    topology identifiers.\n                ",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            }, {
                "name" : "link-id",
                "description" : "The identifier of a link in the topology.  \n                A link is specific to a topology to which it belongs.",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            }, {
                "name" : "link-ref",
                "description" : null,
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            } ],
            "responseMessages" : null
        } ]
    }, {
        "path" : "/operational/network-topology:network-topology/topology/{topology-id}/link/{link-id}/supporting-link/{link-ref}/link-ref",
        "operations" : [ {
            "method" : "GET",
            "summary" : null,
            "notes" : null,
            "type" : "link-ref",
            "nickname" : "GET-link-ref",
            "consumes" : null,
            "parameters" : [ {
                "name" : "topology-id",
                "description" : "\n                    It is presumed that a datastore will contain many topologies. To\n                    distinguish between topologies it is vital to have UNIQUE\n                    topology identifiers.\n                ",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            }, {
                "name" : "link-id",
                "description" : "The identifier of a link in the topology.  \n                A link is specific to a topology to which it belongs.",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            }, {
                "name" : "link-ref",
                "description" : null,
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            } ],
            "responseMessages" : null
        } ]
    }, {
        "path" : "/operational/network-topology:network-topology/topology/{topology-id}/node/{node-id}",
        "operations" : [ {
            "method" : "GET",
            "summary" : null,
            "notes" : "The list of network nodes defined for the topology.",
            "type" : "node",
            "nickname" : "GET-node",
            "consumes" : null,
            "parameters" : [ {
                "name" : "topology-id",
                "description" : "\n                    It is presumed that a datastore will contain many topologies. To\n                    distinguish between topologies it is vital to have UNIQUE\n                    topology identifiers.\n                ",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            }, {
                "name" : "node-id",
                "description" : "The identifier of a node in the topology.  \n                A node is specific to a topology to which it belongs.",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            } ],
            "responseMessages" : null
        } ]
    }, {
        "path" : "/operational/network-topology:network-topology/topology/{topology-id}/node/{node-id}/node-id",
        "operations" : [ {
            "method" : "GET",
            "summary" : null,
            "notes" : "The identifier of a node in the topology.  \n                A node is specific to a topology to which it belongs.",
            "type" : "node-id",
            "nickname" : "GET-node-id",
            "consumes" : null,
            "parameters" : [ {
                "name" : "topology-id",
                "description" : "\n                    It is presumed that a datastore will contain many topologies. To\n                    distinguish between topologies it is vital to have UNIQUE\n                    topology identifiers.\n                ",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            }, {
                "name" : "node-id",
                "description" : "The identifier of a node in the topology.  \n                A node is specific to a topology to which it belongs.",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            } ],
            "responseMessages" : null
        } ]
    }, {
        "path" : "/operational/network-topology:network-topology/topology/{topology-id}/node/{node-id}/supporting-node/{node-ref}",
        "operations" : [ {
            "method" : "GET",
            "summary" : null,
            "notes" : "This list defines vertical layering information for nodes. \n                It allows to capture for any given node, which node (or nodes)\n                in the corresponding underlay topology it maps onto.  \n                A node can map to zero, one, or more nodes below it;\n                accordingly there can be zero, one, or more elements in the list.\n                If there are specific layering requirements, for example\n                specific to a particular type of topology that only allows\n                for certain layering relationships, the choice\n                below can be augmented with additional cases.\n                A list has been chosen rather than a leaf-list in order \n                to provide room for augmentations, e.g. for \n                statistics or priorization information associated with \n                supporting nodes.",
            "type" : "supporting-node",
            "nickname" : "GET-supporting-node",
            "consumes" : null,
            "parameters" : [ {
                "name" : "topology-id",
                "description" : "\n                    It is presumed that a datastore will contain many topologies. To\n                    distinguish between topologies it is vital to have UNIQUE\n                    topology identifiers.\n                ",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            }, {
                "name" : "node-id",
                "description" : "The identifier of a node in the topology.  \n                A node is specific to a topology to which it belongs.",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            }, {
                "name" : "node-ref",
                "description" : null,
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            } ],
            "responseMessages" : null
        } ]
    }, {
        "path" : "/operational/network-topology:network-topology/topology/{topology-id}/node/{node-id}/supporting-node/{node-ref}/node-ref",
        "operations" : [ {
            "method" : "GET",
            "summary" : null,
            "notes" : null,
            "type" : "node-ref",
            "nickname" : "GET-node-ref",
            "consumes" : null,
            "parameters" : [ {
                "name" : "topology-id",
                "description" : "\n                    It is presumed that a datastore will contain many topologies. To\n                    distinguish between topologies it is vital to have UNIQUE\n                    topology identifiers.\n                ",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            }, {
                "name" : "node-id",
                "description" : "The identifier of a node in the topology.  \n                A node is specific to a topology to which it belongs.",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            }, {
                "name" : "node-ref",
                "description" : null,
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            } ],
            "responseMessages" : null
        } ]
    }, {
        "path" : "/operational/network-topology:network-topology/topology/{topology-id}/node/{node-id}/termination-point/{tp-id}",
        "operations" : [ {
            "method" : "GET",
            "summary" : null,
            "notes" : "A termination point can terminate a link.  \n                        Depending on the type of topology, a termination point could, \n                        for example, refer to a port or an interface.",
            "type" : "termination-point",
            "nickname" : "GET-termination-point",
            "consumes" : null,
            "parameters" : [ {
                "name" : "topology-id",
                "description" : "\n                    It is presumed that a datastore will contain many topologies. To\n                    distinguish between topologies it is vital to have UNIQUE\n                    topology identifiers.\n                ",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            }, {
                "name" : "node-id",
                "description" : "The identifier of a node in the topology.  \n                A node is specific to a topology to which it belongs.",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            }, {
                "name" : "tp-id",
                "description" : null,
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            } ],
            "responseMessages" : null
        } ]
    }, {
        "path" : "/operational/network-topology:network-topology/topology/{topology-id}/node/{node-id}/termination-point/{tp-id}/tp-id",
        "operations" : [ {
            "method" : "GET",
            "summary" : null,
            "notes" : null,
            "type" : "tp-id",
            "nickname" : "GET-tp-id",
            "consumes" : null,
            "parameters" : [ {
                "name" : "topology-id",
                "description" : "\n                    It is presumed that a datastore will contain many topologies. To\n                    distinguish between topologies it is vital to have UNIQUE\n                    topology identifiers.\n                ",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            }, {
                "name" : "node-id",
                "description" : "The identifier of a node in the topology.  \n                A node is specific to a topology to which it belongs.",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            }, {
                "name" : "tp-id",
                "description" : null,
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            } ],
            "responseMessages" : null
        } ]
    }, {
        "path" : "/operational/network-topology:network-topology/topology/{topology-id}/node/{node-id}/termination-point/{tp-id}/tp-ref",
        "operations" : [ {
            "method" : "GET",
            "summary" : null,
            "notes" : "The leaf list identifies any termination points that the \n                termination point is dependent on, or maps onto.  \n                Those termination points will themselves be contained \n                in a supporting node.  \n                This dependency information can be inferred from \n                the dependencies between links.  For this reason, \n                this item is not separately configurable.  Hence no\n                corresponding constraint needs to be articulated.  \n                The corresponding information is simply provided by the\n                implementing system.",
            "type" : "tp-ref",
            "nickname" : "GET-tp-ref",
            "consumes" : null,
            "parameters" : [ {
                "name" : "topology-id",
                "description" : "\n                    It is presumed that a datastore will contain many topologies. To\n                    distinguish between topologies it is vital to have UNIQUE\n                    topology identifiers.\n                ",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            }, {
                "name" : "node-id",
                "description" : "The identifier of a node in the topology.  \n                A node is specific to a topology to which it belongs.",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            }, {
                "name" : "tp-id",
                "description" : null,
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            } ],
            "responseMessages" : null
        } ]
    }, {
        "path" : "/operational/network-topology:network-topology/topology/{topology-id}/topology-id",
        "operations" : [ {
            "method" : "GET",
            "summary" : null,
            "notes" : "\n                    It is presumed that a datastore will contain many topologies. To\n                    distinguish between topologies it is vital to have UNIQUE\n                    topology identifiers.\n                ",
            "type" : "topology-id",
            "nickname" : "GET-topology-id",
            "consumes" : null,
            "parameters" : [ {
                "name" : "topology-id",
                "description" : "\n                    It is presumed that a datastore will contain many topologies. To\n                    distinguish between topologies it is vital to have UNIQUE\n                    topology identifiers.\n                ",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            } ],
            "responseMessages" : null
        } ]
    }, {
        "path" : "/operational/network-topology:network-topology/topology/{topology-id}/topology-types",
        "operations" : [ {
            "method" : "GET",
            "summary" : null,
            "notes" : "This container is used to identify the type, or types \n                    (as a topology can support several types simultaneously), \n                    of the topology.  \n                    Topology types are the subject of several integrity constraints \n                    that an implementing server can validate in order to \n                    maintain integrity of the datastore.  \n                    Topology types are indicated through separate data nodes; \n                    the set of topology types is expected to increase over time.\n                    To add support for a new topology, an augmenting module\n                    needs to augment this container with a new empty optional \n                    container to indicate the new topology type.  \n                    The use of a container allows to indicate a subcategorization\n                    of topology types.  \n                    The container SHALL NOT be augmented with any data nodes \n                    that serve a purpose other than identifying a particular \n                    topology type.  \n                ",
            "type" : "topology-types",
            "nickname" : "GET-topology-types",
            "consumes" : null,
            "parameters" : [ {
                "name" : "topology-id",
                "description" : "\n                    It is presumed that a datastore will contain many topologies. To\n                    distinguish between topologies it is vital to have UNIQUE\n                    topology identifiers.\n                ",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            } ],
            "responseMessages" : null
        } ]
    }, {
        "path" : "/operational/network-topology:network-topology/topology/{topology-id}/underlay-topology/{topology-ref}",
        "operations" : [ {
            "method" : "GET",
            "summary" : null,
            "notes" : "Identifies the topology, or topologies, that this topology\n                    is dependent on.",
            "type" : "underlay-topology",
            "nickname" : "GET-underlay-topology",
            "consumes" : null,
            "parameters" : [ {
                "name" : "topology-id",
                "description" : "\n                    It is presumed that a datastore will contain many topologies. To\n                    distinguish between topologies it is vital to have UNIQUE\n                    topology identifiers.\n                ",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            }, {
                "name" : "topology-ref",
                "description" : null,
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            } ],
            "responseMessages" : null
        } ]
    }, {
        "path" : "/operational/network-topology:network-topology/topology/{topology-id}/underlay-topology/{topology-ref}/topology-ref",
        "operations" : [ {
            "method" : "GET",
            "summary" : null,
            "notes" : null,
            "type" : "topology-ref",
            "nickname" : "GET-topology-ref",
            "consumes" : null,
            "parameters" : [ {
                "name" : "topology-id",
                "description" : "\n                    It is presumed that a datastore will contain many topologies. To\n                    distinguish between topologies it is vital to have UNIQUE\n                    topology identifiers.\n                ",
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            }, {
                "name" : "topology-ref",
                "description" : null,
                "required" : false,
                "type" : "string",
                "paramType" : "path"
            } ],
            "responseMessages" : null
        } ]
    } ],
    "models" : {
        "underlay-topology" : {
            "id" : "underlay-topology",
            "$schema" : "http://json-schema.org/draft-04/schema",
            "properties" : {
                "topology-ref" : {
                    "required" : false
                }
            },
            "type" : "object"
        },
        "network-topology" : "{\n  \"id\": \"network-topology\",\n  \"$schema\": \"http://json-schema.org/draft-04/schema\",\n  \"properties\": {\"topology\": {\n    \"items\": {\"$ref\": \"topology\"},\n    \"description\": \"\\n                This is the model of an abstract topology.\\n                A topology contins nodes and links.  \\n                Each topology MUST be identified by\\n                unique topology-id for reason that a network could contain many\\n                topologies.\\n            \",\n    \"type\": \"array\"\n  }},\n  \"type\": \"object\"\n}",
        "node" : {
            "id" : "node",
            "$schema" : "http://json-schema.org/draft-04/schema",
            "properties" : {
                "supporting-node" : {
                    "items" : {
                        "$ref" : "supporting-node"
                    },
                    "description" : "This list defines vertical layering information for nodes. \n                It allows to capture for any given node, which node (or nodes)\n                in the corresponding underlay topology it maps onto.  \n                A node can map to zero, one, or more nodes below it;\n                accordingly there can be zero, one, or more elements in the list.\n                If there are specific layering requirements, for example\n                specific to a particular type of topology that only allows\n                for certain layering relationships, the choice\n                below can be augmented with additional cases.\n                A list has been chosen rather than a leaf-list in order \n                to provide room for augmentations, e.g. for \n                statistics or priorization information associated with \n                supporting nodes.",
                    "type" : "array"
                },
                "termination-point" : {
                    "items" : {
                        "$ref" : "termination-point"
                    },
                    "description" : "A termination point can terminate a link.  \n                        Depending on the type of topology, a termination point could, \n                        for example, refer to a port or an interface.",
                    "type" : "array"
                },
                "node-id" : {
                    "description" : "The identifier of a node in the topology.  \n                A node is specific to a topology to which it belongs.",
                    "type" : "string",
                    "required" : false
                }
            },
            "type" : "object"
        },
        "supporting-node" : {
            "id" : "supporting-node",
            "$schema" : "http://json-schema.org/draft-04/schema",
            "properties" : {
                "node-ref" : {
                    "required" : false
                }
            },
            "type" : "object"
        },
        "link" : {
            "id" : "link",
            "$schema" : "http://json-schema.org/draft-04/schema",
            "properties" : {
                "source" : {
                    "properties" : {
                        "source-node" : {
                            "description" : "Source node identifier, must be in same topology.",
                            "required" : true
                        },
                        "source-tp" : {
                            "description" : "Termination point within source node that terminates the link.",
                            "required" : false
                        }
                    },
                    "type" : "object"
                },
                "supporting-link" : {
                    "items" : {
                        "$ref" : "supporting-link"
                    },
                    "type" : "array"
                },
                "link-id" : {
                    "description" : "The identifier of a link in the topology.  \n                A link is specific to a topology to which it belongs.",
                    "type" : "string",
                    "required" : false
                },
                "destination" : {
                    "properties" : {
                        "dest-node" : {
                            "description" : "Destination node identifier, must be in same topology.",
                            "required" : true
                        },
                        "dest-tp" : {
                            "description" : "Termination point within destination node that terminates the link.",
                            "required" : false
                        }
                    },
                    "type" : "object"
                }
            },
            "type" : "object"
        },
        "termination-point" : {
            "id" : "termination-point",
            "$schema" : "http://json-schema.org/draft-04/schema",
            "properties" : {
                "tp-ref" : {
                    "items" : { },
                    "description" : "The leaf list identifies any termination points that the \n                termination point is dependent on, or maps onto.  \n                Those termination points will themselves be contained \n                in a supporting node.  \n                This dependency information can be inferred from \n                the dependencies between links.  For this reason, \n                this item is not separately configurable.  Hence no\n                corresponding constraint needs to be articulated.  \n                The corresponding information is simply provided by the\n                implementing system.",
                    "required" : false,
                    "type" : "array"
                },
                "tp-id" : {
                    "type" : "string",
                    "required" : false
                }
            },
            "type" : "object"
        },
        "topology" : {
            "id" : "topology",
            "$schema" : "http://json-schema.org/draft-04/schema",
            "properties" : {
                "underlay-topology" : {
                    "items" : {
                        "$ref" : "underlay-topology"
                    },
                    "description" : "Identifies the topology, or topologies, that this topology\n                    is dependent on.",
                    "type" : "array"
                },
                "node" : {
                    "items" : {
                        "$ref" : "node"
                    },
                    "description" : "The list of network nodes defined for the topology.",
                    "type" : "array"
                },
                "topology-types" : {
                    "description" : "This container is used to identify the type, or types \n                    (as a topology can support several types simultaneously), \n                    of the topology.  \n                    Topology types are the subject of several integrity constraints \n                    that an implementing server can validate in order to \n                    maintain integrity of the datastore.  \n                    Topology types are indicated through separate data nodes; \n                    the set of topology types is expected to increase over time.\n                    To add support for a new topology, an augmenting module\n                    needs to augment this container with a new empty optional \n                    container to indicate the new topology type.  \n                    The use of a container allows to indicate a subcategorization\n                    of topology types.  \n                    The container SHALL NOT be augmented with any data nodes \n                    that serve a purpose other than identifying a particular \n                    topology type.  \n                ",
                    "properties" : { },
                    "type" : "object"
                },
                "topology-id" : {
                    "description" : "\n                    It is presumed that a datastore will contain many topologies. To\n                    distinguish between topologies it is vital to have UNIQUE\n                    topology identifiers.\n                ",
                    "type" : "string",
                    "required" : false
                },
                "link" : {
                    "items" : {
                        "$ref" : "link"
                    },
                    "description" : "\n                    A Network Link connects a by Local (Source) node and\n                    a Remote (Destination) Network Nodes via a set of the \n                    nodes' termination points. \n                    As it is possible to have several links between the same\n                    source and destination nodes, and as a link could potentially\n                    be re-homed between termination points, to ensure that we \n                    would always know to distinguish between links, every link \n                    is identified by a dedicated link identifier.  \n                    Note that a link models a point-to-point link, not a multipoint\n                    link.  \n                    Layering dependencies on links in underlay topologies are\n                    not represented as the layering information of nodes and of \n                    termination points is sufficient.  \n                ",
                    "type" : "array"
                }
            },
            "type" : "object"
        },
        "supporting-link" : {
            "id" : "supporting-link",
            "$schema" : "http://json-schema.org/draft-04/schema",
            "properties" : {
                "link-ref" : {
                    "required" : false
                }
            },
            "type" : "object"
        }
    }
}
