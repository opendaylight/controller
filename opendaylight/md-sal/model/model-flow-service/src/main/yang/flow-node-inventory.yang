module flow-node-inventory {
    namespace "urn:opendaylight:flow:inventory";
    prefix flownode;

    import yang-ext {prefix ext; revision-date "2013-07-09";}
    import ietf-inet-types {prefix inet; revision-date "2010-09-24";}
    import ietf-yang-types {prefix yang; revision-date "2010-09-24";}
    import opendaylight-port-types {prefix port;revision-date "2013-09-25";}
    import opendaylight-inventory {prefix inv;revision-date "2013-08-19";}
    import sal-flow {prefix sal-flow;}
    
    revision "2013-08-19" {
        description "Flow Capable Node extensions to the Inventory model";
    }

    grouping feature {
        leaf support-state {
            type inv:support-type;
        }
    }

    grouping queue {
         leaf queue-id {
            type uint32;
            description "id for the specific queue";
            mandatory true; 
        }
        container properties {
            leaf minimum-rate {
                type uint32;
            }
            leaf maximum-rate{
                type uint32;
            }
        }
    }

    typedef table-id {
        type uint8;
    }


    
    identity table-context {
        description "Identity used to mark node context";
    }
    
    /* 
    grouping table-features {
        container meta-data-match {
        
        }
        
        container meta-data-write {
        
        }
        container config {
            
        }
        
        leaf max-entries {
            type unint32;
        }
        list supported-instructions {
            uses flow:instruction;
        }
        container next-tables {
            uses table-list;
        }
        
        container next-tables-miss {
            uses table-list;
        }
        list write-actions {
            uses action:action-list;
        }
        
        list write-actions-miss {
            uses action:action-list;
        }
        
        list apply-actions {
            uses action:action-list;
        }
        
        list apply-actions-miss {
            uses action:action-list;
        }
        
        list match {
        
        }
        
        list wildcards {
        
        }
        
        list write-set-field {
        }
        list write-set-field-miss {
        }
        list apply-set-field {
        }
        list apply-set-field-miss {
        }
    }
    */
    grouping table {
        leaf id {
            type table-id;
        }
        /*
        ext:context-instance "table-context";
        container features {
            uses table-features;
        }
        container flows {
            list flow {
                key "node id"; 

                leaf id {
                    type uint32;
                }
                uses flow:flow-entry;
            }
        }
        */
    }
    
    grouping flow-node {

        leaf manufacturer {
            type string;
        }
        leaf hardware {
            type string;
        }
        leaf software {
            type string;
        }
        leaf serial-number {
            type string;
        }
        leaf description {
            type string;
        }

        list table {
            key "id";
            uses table;
        }
        
        container group-tables {
            uses feature;
        }
        
        container supported-match-types {
            list match-type {
                uses feature;
                leaf match {
                    type string; // FIXME: Add identity
                }
                
            }
        }
        
        container supported-instructions {
            list instruction-type {
                uses feature;
                leaf instruction {
                    type string; // FIXME: Add identity
                }
            }
        }

        container supported-actions {
            list action-type {
                uses feature;

                leaf action {
                    type string; // FIXME: Add identity
                }
            }
        }
    }
    
    grouping flow-node-connector {

        uses port:flow-capable-port;
    }

    augment "/inv:nodes/inv:node" {
        ext:augment-identifier "flow-capable-node";
        uses flow-node;
    }

    augment "/inv:nodes/inv:node/inv:node-connector" {
        ext:augment-identifier "flow-capable-node-connector";
        uses flow-node-connector;
    }

    augment "/inv:node-updated" {
        ext:augment-identifier "flow-capable-node-updated";
        uses flow-node;
    }

    augment "/inv:node-updated/inv:node-connector" {
        //ext:identical-augment "flow-capable-node-connector";
        ext:augment-identifier "flow-capable-node-connector-update-fields";
        uses flow-node-connector;
    }

    augment "/inv:node-connector-updated" {
        ext:augment-identifier "flow-capable-node-connector-updated";
        uses flow-node-connector;
    }
    
    notification table-updated {
        leaf table-ref {
            ext:context-reference "table-context";
            type sal-flow:flow-table-ref;
        }
        uses table;
    }
    notification table-removed {
        leaf table-ref {
            ext:context-reference "table-context";
            type sal-flow:flow-table-ref;
        }
    }
}