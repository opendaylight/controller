module opendaylight-table-types {
    namespace "urn:opendaylight:table:types";
    prefix table;

    import ietf-inet-types {prefix inet; revision-date "2010-09-24";}
    import ietf-yang-types {prefix yang; revision-date "2010-09-24";}
    import opendaylight-flow-types {prefix flow;revision-date 2013-10-26";}
    import opendaylight-action-types {prefix action;}

    revision "2013-10-26" {
        description "Initial revision of table service";
    }

    typedef table-ref {
        type instance-identifier;
    }
    
    typedef table-config {
        type bits {
            bit DEPRECATED-MASK;
        }
    }

    typedef field {
        type enumeration {
            enum in_port {
                description "Match for Switch input port.";
            }
            enum in_phy_port {
                description "Match for Switch physical input port.";
            }
            enum metadata {
                description "Match for Metadata passed between tables.";
            }
            enum eth_dst {
                description "Match for Ethernet destination address.";
            }
            enum eth_src {
                description "Match for Ethernet source address.";
            }
            enum eth_type {
                description "Match for Ethernet frame type.";
            }
            enum vlan_vid {
                description "Match for VLAN id.";
            }
            enum vlan_pcp {
                description "Match for VLAN priority.";
            }
            enum ip_dscp {
                description "Match for IP DSCP (6 bits in ToS field).";
            }
            enum ip_ecn {
                description "Match for IP ECN (2 bits in ToS field).";
            }
            enum ip_proto {
                description "Match for IP protocol.";
            }
            enum ipv4_src {
                description "Match for IPv4 source address.";
            }
            enum ipv4_dst {
                description "Match for IPv4 destination address.";
            }
            enum tcp_src {
                description "Match for TCP source port.";
            }
            enum tcp_dst {
                description "Match for TCP destination port.";
            }
            enum udp_src {
                description "Match for UDP source port.";
            }
            enum udp_dst {
                description "Match for UDP destination port.";
            }
            enum sctp_src {
                description "Match for SCTP source port.";
            }
            enum sctp_dst {
                description "Match for SCTP destination port.";
            }
            enum icmpv4_type {
                description "Match for ICMP type.";
            }
            enum icmpv4_code {
                description "Match for ICMP code.";
            }
            enum arp_op {
                description "Match for ARP opcode.";
            }
            enum arp_spa {
                description "Match for ARP source IPv4 address.";
            }
            enum arp_tpa {
                description "Match for ARP target IPv4 address.";
            }
            enum arp_sha {
                description "Match for ARP source hardware address.";
            }
            enum arp_tha {
                description "Match for ARP target hardware address.";
            }
            enum ipv6_src {
                description "Match for IPv6 source address.";
            }
            enum ipv6_dst {
                description "Match for IPv6 destination address.";
            }
            enum ipv6_flabel {
                description "Match for IPv6 Flow Label";
            }
            enum icmpv6_type {
                description "Match for ICMPv6 type.";
            }
            enum icmpv6_code {
                description "Match for ICMPv6 code.";
            }
            enum ipv6_nd_target {
                description "Match for Target address for ND.";
            }
            enum ipv6_nd_sll {
                description "Match for Source link-layer for ND.";
            }
            enum ipv6_nd_tll {
                description "Match for Target link-layer for ND.";
            }
            enum mpls_label {
                description "Match for MPLS label.";
            }
            enum mpls_tc {
                description "Match for MPLS TC.";
            }
            enum mpls_bos {
                description "Match for MPLS BoS bit.";
            }
            enum pbb_isid {
                description "Match for PBB I-SID.";
            }
            enum tunnel_id {
                description "Match for Logical Port Metadata";
            }
            enum ipv6_exthdr {
                description "Match for IPv6 Extension Header pseudo-field";
            }
        }
    }
        
    grouping set-field-match {
        list set-field-match {
            leaf match-type {
                type field;
            }
            leaf has-mask {
                type boolean;
            } 
        }
    }
      
    grouping table-feature-prop-type {
        choice table-feature-prop-type {
            case instructions { 
                container instructions {
                    uses flow:instruction-list;
                } 
            }
            
            case instructions-miss {   
                container instructions-miss {
                    uses flow:instruction-list;
                } 
            }

            case next-table {   
                container tables {
                    leaf-list table-ids {
                        type uint8;
                    }
                } 
            }
            
            case next-table-miss {   
                container tables {
                    leaf-list table-ids {
                        type uint8;
                    }
                } 
            }
            
            case write-actions {   
                container write-actions {
                    uses action:action-list;
                } 
            }
            
            case write-actions-miss {   
                container write-actions-miss {
                    uses action:action-list;
                } 
            }
            
            case apply-actions {   
                container apply-actions {
                    uses action:action-list;
                } 
            }
            
            case apply-actions-miss {   
                container apply-actions-miss {
                    uses action:action-list;
                } 
            }
            
            case match {
                uses set-field-match; 
            }
            
            case wildcards {   
                uses set-field-match;
            }
            
            case write-setfield {   
                uses set-field-match;
            }
            
            case write-setfield-miss {   
                uses set-field-match;
            }
            
            case apply-setfield {   
                uses set-field-match; 
            }
            
            case apply-setfield-miss {   
                uses set-field-match; 
            }
        }
    } 
    
    grouping table-features {
        list table-features {
            key "table-id";
            
            leaf table-id {
                type uint8;
            }      
            
            leaf name {
                description "Name of the table";
                type string;               
            }
            
            leaf metadata-match {
                description "Bits of metadata table can match";
                type uint64;                
            }
            
            leaf metadata-write {
                description "Bits of metadata table can write";
                type uint64;                
            }
            
            leaf max-entries {
                description "Max number of entries supported";
                type uint32;                
            }
            
            leaf config {
                description "Bitmap of OFPTC_ values";
                type table-config;
            }
            
            container table-properties {
                list table-feature-properties {
                     key "order";
                     leaf order {
                         type int32;
                     }
                     uses table-feature-prop-type;
                }
            }

        }
    }    
}