/**
* Generated file

* Generated from: yang module name: odl-sal-dom-rpc-remote-cfg  yang module local name: remote-zeromq-rpc-server
* Generated by: org.opendaylight.controller.config.yangjmxgenerator.plugin.JMXGenerator
* Generated at: Thu Dec 05 14:25:21 CET 2013
*
* Do not modify this file unless it is present under src/main directory
*/
package org.opendaylight.controller.config.yang.md.sal.remote.rpc;

import org.opendaylight.controller.sal.connector.remoterpc.*;
import org.opendaylight.controller.sal.core.api.Broker;
import org.osgi.framework.BundleContext;

/**
*
*/
public final class ZeroMQServerModule extends org.opendaylight.controller.config.yang.md.sal.remote.rpc.AbstractZeroMQServerModule
 {

    private static final Integer ZEROMQ_ROUTER_PORT = 5554;
    private BundleContext bundleContext;

    public ZeroMQServerModule(org.opendaylight.controller.config.api.ModuleIdentifier identifier, org.opendaylight.controller.config.api.DependencyResolver dependencyResolver) {
        super(identifier, dependencyResolver);
    }

    public ZeroMQServerModule(org.opendaylight.controller.config.api.ModuleIdentifier identifier, org.opendaylight.controller.config.api.DependencyResolver dependencyResolver,
            ZeroMQServerModule oldModule, java.lang.AutoCloseable oldInstance) {

        super(identifier, dependencyResolver, oldModule, oldInstance);
    }

    @Override
    protected void customValidation(){
        // Add custom validation for module attributes here.
    }

    @Override
    public java.lang.AutoCloseable createInstance() {
        
        Broker broker = getDomBrokerDependency();


        
        final int port = getPort() != null ? getPort() : ZEROMQ_ROUTER_PORT;

        ServerImpl serverImpl = new ServerImpl(port);
        
        ClientImpl clientImpl = new ClientImpl();

        RoutingTableProvider provider = new RoutingTableProvider(bundleContext,serverImpl);


        RemoteRpcProvider facade = new RemoteRpcProvider(serverImpl, clientImpl);
        
        facade.setRoutingTableProvider(provider );
        
        broker.registerProvider(facade, bundleContext);
        return facade;
    }

    public void setBundleContext(BundleContext bundleContext) {
        this.bundleContext = bundleContext;
    }
}
