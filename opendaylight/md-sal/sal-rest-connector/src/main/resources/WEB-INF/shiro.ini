# =========================
# Shiro INI configuration
# =========================

[main]
# Objects and their properties are defined here,
# Such as the securityManager, Realms and anything
# else needed to build the SecurityManager

# name of request parameter with username; if not present filter assumes 'username'
authc.usernameParam = username
# name of request parameter with password; if not present filter assumes 'password'
authc.passwordParam = password
#authc.failureKeyAttribute = shiroLoginFailure

#sha256Matcher = org.apache.shiro.authc.credential.Sha256CredentialsMatcher
#iniRealm.credentialsMatcher = $sha256Matcher

## jdbc config
#ds = com.mysql.jdbc.Driver
#ds.url = jdbc:mysql://localhost:3306/aaa
#ds.user = root
#ds.password = root
#ds.databseName = aaa

####

#jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm 
#jdbcRealm.permissionsLookupEnabled = false
#jdbcRealm.authenticationQuery = "SELECT password FROM users WHERE name = ?"
#jdbcRealm.userRolesQuery = "select roles.name from (select users.name, grants.roleid from users join grants on (users.userid=grants.userid)) as ug join roles on (ug.roleid=roles.roleid) WHERE ug.name = ?"
#ds = org.apache.commons.dbcp.BasicDataSource
#ds.driverClassName = com.mysql.jdbc.Driver 
#ds.username = root
#ds.password = root 
#ds.url = jdbc:mysql://localhost:3306/aaa 
#ds.maxActive = 10 
#jdbcRealm.dataSource = $ds 

####
rolePermissionResolver = org.opendaylight.controller.sal.rest.impl.SimpleRolePermissionResolver
# JdniLdapRealm example for brcd-sssd-tb.com
ldapRealm = org.opendaylight.controller.sal.rest.impl.ODLJdniLdapRealm
ldapRealm.userDnTemplate = uid={0},cn=users,cn=accounts,dc=brcd-sssd-tb,dc=com
ldapRealm.contextFactory.url = ldap://freeipa.brcd-sssd-tb.com:389
#ldapRealm.contextFactory.authenticationMechanism = DIGEST-MD5
#ldapRealm.rolePermissionResolver = $rolePermissionResolver
ldapRealm.rolePermissionResolver = $rolePermissionResolver
securityManager.realm = $ldapRealm

[users]
# The 'users' section is for simple deployments
# when you only need a small number of statically-defined
# set of User accounts.
#admin = admin, ROLE_ADMIN
#user = user, ROLE_USER

[roles]
# The 'roles' section is for simple deployments
# when you only need a small number of statically-defined
# roles.
#admin = *
#ROLE_ADMIN = *
#ROLE_USER = protected:read

[urls]
/** = authcBasic
