/**
 * Generated file

 * Generated from: yang module name: config-logback-appender  yang module local name: file-appender
 * Generated by: org.opendaylight.controller.config.yangjmxgenerator.plugin.JMXGenerator
 * Generated at: Thu Feb 06 17:13:23 CET 2014
 *
 * Do not modify this file unless it is present under src/main directory
 */
package org.opendaylight.controller.config.yang.logback.appender;

import ch.qos.logback.core.FileAppender;
import com.google.common.base.Preconditions;
import com.google.common.collect.Sets;
import org.opendaylight.controller.config.api.DependencyResolverFactory;
import org.opendaylight.controller.config.api.ModuleIdentifier;
import org.opendaylight.controller.config.yang.logback.util.AppenderDiscovery;
import org.opendaylight.controller.config.yang.logback.util.AppenderFactoryUtil;
import org.osgi.framework.BundleContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class FileAppenderModuleFactory extends org.opendaylight.controller.config.yang.logback.appender.AbstractFileAppenderModuleFactory {
    private static final Logger logger = LoggerFactory.getLogger(FileAppenderModuleFactory.class);

    public static final String INSTANCE_NAME = "singleton";

    //Enforce singleton
    @Override
    public FileAppenderModule createModule(String instanceName, org.opendaylight.controller.config.api.DependencyResolver dependencyResolver, org.osgi.framework.BundleContext bundleContext) {
        Preconditions.checkArgument(INSTANCE_NAME.equals(instanceName), "Wrong instanceName, only allowed is " + INSTANCE_NAME);
        return (FileAppenderModule) super.createModule(instanceName, dependencyResolver, bundleContext);
    }

    @Override
    public Set<FileAppenderModule> getDefaultModules(DependencyResolverFactory dependencyResolverFactory, BundleContext bundleContext) {

        ModuleIdentifier moduleIdentifier = new ModuleIdentifier(NAME, INSTANCE_NAME);
        if (dependencyResolverFactory.createTemporaryDependencyResolver().containsDependency(moduleIdentifier)) {
            return Collections.emptySet();
        }
        // not exists yet

        FileAppenderModule defaultModule = createModule(INSTANCE_NAME, dependencyResolverFactory.createDependencyResolver(
                moduleIdentifier), bundleContext);
        Map<String, FileAppender> current = new AppenderDiscovery().findAppenders(FileAppender.class);
        List<FileAppenderTO> tos = new ArrayList<>(current.size());
        for (FileAppender fileAppender : current.values()) {
            if (AppenderFactoryUtil.isEncoderSupported(fileAppender) == false) {
                logger.warn("Encoder/pattern in appender " + fileAppender.getName() + " was not recognized:" +
                        fileAppender.getEncoder() + " , skipping appender");
                continue;
            }
            FileAppenderTO to = AppenderFactoryUtil.setName_EncoderPattern_ThresholdFilter(fileAppender, new FileAppenderTO());
            tos.add(to);
            // add append, fileName
            to.setAppend(fileAppender.isAppend());
            to.setFile(fileAppender.getFile());
        }
        defaultModule.setFileAppenderTO(tos);
        return Sets.newHashSet(defaultModule);
    }


}
