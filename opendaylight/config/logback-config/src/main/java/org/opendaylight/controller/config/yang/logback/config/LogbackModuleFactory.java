/*
 * Copyright (c) 2013 Cisco Systems, Inc. and others.  All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */

/**
 * Generated file

 * Generated by: org.opendaylight.controller.config.yangjmxgenerator.plugin.JMXGenerator
 * Generated at: Wed Jul 17 15:26:45 CEST 2013
 *
 * Do not modifiy this file unless it is present under src/main directory
 */
package org.opendaylight.controller.config.yang.logback.config;

import com.google.common.base.Preconditions;
import com.google.common.collect.Sets;
import org.opendaylight.controller.config.api.DependencyResolver;
import org.opendaylight.controller.config.api.DependencyResolverFactory;
import org.opendaylight.controller.config.api.ModuleIdentifier;
import org.osgi.framework.BundleContext;

import java.util.ArrayList;
import java.util.Set;

public class LogbackModuleFactory extends
        org.opendaylight.controller.config.yang.logback.config.AbstractLogbackModuleFactory {

    public static final String INSTANCE_NAME = "singleton";

    @Override
    public LogbackModule instantiateModule(String instanceName, DependencyResolver dependencyResolver,
            BundleContext bundleContext) {
        Preconditions.checkArgument(instanceName.equals(INSTANCE_NAME),
                "There should be just one instance of logback, named " + INSTANCE_NAME);
        LogbackModule logbackModule = super.instantiateModule(instanceName, dependencyResolver, bundleContext);

        // fill loggers
        LoggerExtractor loggerExtractor = new LoggerExtractor();
        logbackModule.setLoggerTO(new ArrayList<>(loggerExtractor.getReducedLoggerTOs().values()));

        return logbackModule;
    }

    @Override
    public Set<LogbackModule> getDefaultModules(DependencyResolverFactory dependencyResolverFactory,
            BundleContext bundleContext) {
        DependencyResolver resolver = dependencyResolverFactory.createDependencyResolver(new ModuleIdentifier(
                getImplementationName(), INSTANCE_NAME));
        LogbackModule defaultLogback = instantiateModule(INSTANCE_NAME, resolver, bundleContext);
        return Sets.newHashSet(defaultLogback);
    }

}
