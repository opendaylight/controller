/**
 * Generated file

 * Generated from: yang module name: config-logback-appender  yang module local name: console-appender
 * Generated by: org.opendaylight.controller.config.yangjmxgenerator.plugin.JMXGenerator
 * Generated at: Thu Feb 06 17:13:23 CET 2014
 *
 * Do not modify this file unless it is present under src/main directory
 */
package org.opendaylight.controller.config.yang.logback.appender;

import ch.qos.logback.core.ConsoleAppender;
import com.google.common.base.Preconditions;
import com.google.common.collect.Sets;
import org.opendaylight.controller.config.api.DependencyResolverFactory;
import org.opendaylight.controller.config.api.ModuleIdentifier;
import org.opendaylight.controller.config.yang.logback.util.AppenderDiscovery;
import org.opendaylight.controller.config.yang.logback.util.AppenderFactoryUtil;
import org.osgi.framework.BundleContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Set;


public class ConsoleAppenderModuleFactory extends org.opendaylight.controller.config.yang.logback.appender.AbstractConsoleAppenderModuleFactory {
    private static final Logger logger = LoggerFactory.getLogger(ConsoleAppenderModuleFactory.class);

    public static final String INSTANCE_NAME = "singleton";

    //Enforce singleton
    @Override
    public ConsoleAppenderModule createModule(String instanceName,
                                              org.opendaylight.controller.config.api.DependencyResolver dependencyResolver,
                                              org.osgi.framework.BundleContext bundleContext) {
        Preconditions.checkArgument(INSTANCE_NAME.equals(instanceName), "Wrong instanceName, only allowed is " + INSTANCE_NAME);
        return (ConsoleAppenderModule) super.createModule(instanceName, dependencyResolver, bundleContext);
    }

    @Override
    public Set<ConsoleAppenderModule> getDefaultModules(DependencyResolverFactory dependencyResolverFactory, BundleContext bundleContext) {

        ModuleIdentifier moduleIdentifier = new ModuleIdentifier(NAME, INSTANCE_NAME);
        if (dependencyResolverFactory.createTemporaryDependencyResolver().containsDependency(moduleIdentifier)) {
            return Collections.emptySet();
        }
        // not exists yet
        ConsoleAppenderModule defaultModule = createModule(INSTANCE_NAME, dependencyResolverFactory.createDependencyResolver(
                moduleIdentifier), bundleContext);

        Map<String, ConsoleAppender> current = new AppenderDiscovery().findAppenders(ConsoleAppender.class);
        List<ConsoleAppenderTO> tos = new ArrayList<>(current.size());
        for (ConsoleAppender consoleAppender : current.values()) {
            if (AppenderFactoryUtil.isEncoderSupported(consoleAppender) == false) {
                logger.warn("Encoder/pattern in appender " + consoleAppender.getName() + " was not recognized:" +
                        consoleAppender.getEncoder() + " , skipping appender");
                continue;
            }
            ConsoleAppenderTO to = AppenderFactoryUtil.setName_EncoderPattern_ThresholdFilter(consoleAppender, new ConsoleAppenderTO());
            tos.add(to);
        }
        defaultModule.setConsoleAppenderTO(tos);
        return Sets.newHashSet(defaultModule);
    }


}
