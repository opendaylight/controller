/**
 * Generated file

 * Generated from: yang module name: config-logback-appender  yang module local name: console-appender
 * Generated by: org.opendaylight.controller.config.yangjmxgenerator.plugin.JMXGenerator
 * Generated at: Thu Feb 06 17:13:23 CET 2014
 *
 * Do not modify this file unless it is present under src/main directory
 */
package org.opendaylight.controller.config.yang.logback.appender;

import ch.qos.logback.core.ConsoleAppender;
import nu.xom.Element;
import org.opendaylight.controller.config.yang.logback.api.HasAppenders;
import org.opendaylight.controller.config.yang.logback.api.HasAppendersImpl;

import static org.opendaylight.controller.config.api.JmxAttributeValidationException.checkCondition;
import static org.opendaylight.controller.config.api.JmxAttributeValidationException.checkNotNull;

public final class ConsoleAppenderModule extends org.opendaylight.controller.config.yang.logback.appender.AbstractConsoleAppenderModule {

    public ConsoleAppenderModule(org.opendaylight.controller.config.api.ModuleIdentifier identifier, org.opendaylight.controller.config.api.DependencyResolver dependencyResolver) {
        super(identifier, dependencyResolver);
    }

    public ConsoleAppenderModule(org.opendaylight.controller.config.api.ModuleIdentifier identifier, org.opendaylight.controller.config.api.DependencyResolver dependencyResolver,
                                 ConsoleAppenderModule oldModule, java.lang.AutoCloseable oldInstance) {

        super(identifier, dependencyResolver, oldModule, oldInstance);
    }

    @Override
    protected void customValidation() {
        checkNotNull(getConsoleAppenderTO(), consoleAppenderTOJmxAttribute);
        for (ConsoleAppenderTO to : getConsoleAppenderTO()) {
            checkCondition(to.getName() != null && to.getName().isEmpty() == false, "Name is not set", consoleAppenderTOJmxAttribute);
            checkNotNull(to.getEncoderPattern(), "Encoder pattern is not set", consoleAppenderTOJmxAttribute);
        }
    }

    @Override
    public HasAppenders createInstance() {

        return new HasAppendersImpl<ConsoleAppenderTO>(getConsoleAppenderTO()) {
            @Override
            protected Element getElement(ConsoleAppenderTO appenderTO) {
                return fillElement(ConsoleAppender.class, appenderTO.getName(), appenderTO.getEncoderPattern(), appenderTO.getThresholdFilter());
            }
        };
    }

}
