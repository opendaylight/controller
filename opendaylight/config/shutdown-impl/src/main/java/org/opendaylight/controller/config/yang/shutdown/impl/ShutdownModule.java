/*
 * Copyright (c) 2014 Cisco Systems, Inc. and others.  All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */
/**
 * Generated file

 * Generated from: yang module name: shutdown-impl  yang module local name: shutdown
 * Generated by: org.opendaylight.controller.config.yangjmxgenerator.plugin.JMXGenerator
 * Generated at: Wed Dec 18 14:02:06 CET 2013
 *
 * Do not modify this file unless it is present under src/main directory
 */
package org.opendaylight.controller.config.yang.shutdown.impl;

import org.opendaylight.controller.config.api.DependencyResolver;
import org.opendaylight.controller.config.api.JmxAttributeValidationException;
import org.opendaylight.controller.config.api.ModuleIdentifier;
import org.osgi.framework.Bundle;

public final class ShutdownModule extends AbstractShutdownModule {
    private final Bundle systemBundle;

    public ShutdownModule(ModuleIdentifier identifier, Bundle systemBundle) {
        super(identifier, null);
        singletonCheck(identifier);
        this.systemBundle = systemBundle;
    }

    public ShutdownModule(ModuleIdentifier identifier, ShutdownModule oldModule, java.lang.AutoCloseable oldInstance,
                          Bundle systemBundle) {
        super(identifier, null, oldModule, oldInstance);
        singletonCheck(identifier);
        this.systemBundle = systemBundle;
    }

    private static void singletonCheck(ModuleIdentifier identifier) {
        if (AbstractShutdownModuleFactory.NAME.equals(identifier.getInstanceName()) == false) {
            throw new IllegalArgumentException("Singleton enforcement failed. Expected instance name " + AbstractShutdownModuleFactory.NAME);
        }
    }

    @Deprecated // needed for generated code
    public ShutdownModule(ModuleIdentifier identifier, DependencyResolver dependencyResolver, ShutdownModule oldModule,
                          AutoCloseable oldInstance) {
        super(identifier, dependencyResolver, oldModule, oldInstance);
        throw new UnsupportedOperationException();
    }

    @Deprecated // needed for generated code
    public ShutdownModule(ModuleIdentifier identifier, DependencyResolver dependencyResolver) {
        super(identifier, dependencyResolver);
        throw new UnsupportedOperationException();
    }

    @Override
    protected void customValidation() {
        JmxAttributeValidationException.checkNotNull(super.getSecret(), secretJmxAttribute);
    }

    @Override
    public java.lang.AutoCloseable createInstance() {
        return new ShutdownServiceImpl(getSecret(), systemBundle, getRootRuntimeBeanRegistratorWrapper());
    }
}
