/*
 * Copyright (c) 2013 Cisco Systems, Inc. and others.  All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */
package org.opendaylight.controller.yang2sources.plugin.it;

import static org.junit.Assert.*;
import static org.junit.matchers.JUnitMatchers.*;

import java.io.File;

import org.apache.maven.it.VerificationException;
import org.apache.maven.it.Verifier;
import org.junit.Test;

public class YangToSourcesPluginTest {

    @Test
    public void testYangRootNotExist() {
        try {
            setUp("YangRootNotExist/", false);
        } catch (VerificationException e) {
            assertVerificationException(e,
                    "[ERROR] yang-to-sources: Unable to parse yang files from unknown");
            assertVerificationException(
                    e,
                    "Caused by: org.apache.maven.plugin.MojoExecutionException: yang-to-sources: Unable to parse yang files from unknown");
            return;
        }

        fail("Verification exception should have been thrown");
    }

    @Test
    public void testCorrect() throws VerificationException {
        Verifier v = setUp("Correct/", false);
        verifyCorrectLog(v);
    }

    static void verifyCorrectLog(Verifier v) throws VerificationException {
        v.verifyErrorFreeLog();
        v.verifyTextInLog("[INFO] yang-to-sources: yang files parsed from");
        v.verifyTextInLog("[INFO] yang-to-sources: Code generator instantiated from org.opendaylight.controller.yang2sources.spi.CodeGeneratorTestImpl");
        v.verifyTextInLog("[INFO] yang-to-sources: Sources generated by org.opendaylight.controller.yang2sources.spi.CodeGeneratorTestImpl: null");
    }

    @Test
    public void testNoGenerators() throws VerificationException {
        Verifier v = setUp("NoGenerators/", false);
        v.verifyErrorFreeLog();
        v.verifyTextInLog("[WARNING] yang-to-sources: No code generators provided");
    }

    @Test
    public void testUnknownGenerator() throws VerificationException {
        Verifier v = setUp("UnknownGenerator/", true);
        v.verifyTextInLog("[ERROR] yang-to-sources: Unable to generate sources with unknown generator");
        v.verifyTextInLog("java.lang.ClassNotFoundException: unknown");
        v.verifyTextInLog("[INFO] yang-to-sources: Code generator instantiated from org.opendaylight.controller.yang2sources.spi.CodeGeneratorTestImpl");
        v.verifyTextInLog("[INFO] yang-to-sources: Sources generated by org.opendaylight.controller.yang2sources.spi.CodeGeneratorTestImpl: null");
        v.verifyTextInLog("[ERROR] yang-to-sources: One or more code generators failed, including failed list(generatorClass=exception) {unknown=java.lang.ClassNotFoundException}");
    }

    @Test
    public void testNoYangFiles() throws VerificationException {
        Verifier v = setUp("NoYangFiles/", false);
        v.verifyTextInLog("[WARNING] yang-to-sources: No yang file found in ");
        v.verifyTextInLog("[INFO] yang-to-sources: yang files parsed from []");
        v.verifyTextInLog("[INFO] yang-to-sources: Code generator instantiated from org.opendaylight.controller.yang2sources.spi.CodeGeneratorTestImpl");
        v.verifyTextInLog("[INFO] yang-to-sources: Sources generated by org.opendaylight.controller.yang2sources.spi.CodeGeneratorTestImpl: null");
    }

    static void assertVerificationException(VerificationException e,
            String string) {
        assertThat(e.getMessage(), containsString(string));
    }

    static Verifier setUp(String project, boolean ignoreF)
            throws VerificationException {
        Verifier verifier = new Verifier(new File("src/test/resources/"
                + project).getAbsolutePath());
        if (ignoreF)
            verifier.addCliOption("-fn");
        verifier.executeGoal("generate-resources");
        return verifier;
    }

}
