/*
 * Copyright (c) 2013 Cisco Systems, Inc. and others.  All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */
package org.opendaylight.controller.yang2sources.plugin.it;

import static org.junit.Assert.*;
import static org.junit.matchers.JUnitMatchers.*;

import java.io.File;
import java.net.URL;

import org.apache.maven.it.VerificationException;
import org.apache.maven.it.Verifier;
import org.junit.Test;

public class YangToSourcesPluginTestIT {

    // TODO Test yang files in transitive dependencies

    @Test
    public void testYangRootNotExist() {
        try {
            setUp("YangRootNotExist/", false);
        } catch (VerificationException e) {
            assertVerificationException(e,
                    "[ERROR] yang-to-sources: Unable to parse yang files from ");
            assertVerificationException(
                    e,
                    "Caused by: org.apache.maven.plugin.MojoExecutionException: yang-to-sources: Unable to parse yang files from ");
            return;
        }

        fail("Verification exception should have been thrown");
    }

    @Test
    public void testCorrect() throws VerificationException {
        Verifier v = setUp("Correct/", false);
        verifyCorrectLog(v);
    }

    @Test
    public void testAdditionalConfiguration() throws VerificationException {
        Verifier v = setUp("AdditionalConfig/", false);
        v.verifyTextInLog("[DEBUG] yang-to-sources: Additional configuration picked up for : org.opendaylight.controller.yang2sources.spi.CodeGeneratorTestImpl: {nm1=abcd=a.b.c.d, nm2=abcd2=a.b.c.d.2}");
        v.verifyTextInLog("[DEBUG] yang-to-sources: Additional configuration picked up for : org.opendaylight.controller.yang2sources.spi.CodeGeneratorTestImpl: {c1=config}");
        v.verifyTextInLog(File.separator
                + "files marked as resources: META-INF/yang");
        v.verifyTextInLog("target"
                + File.separator
                + "generated-resources marked as resources for generator: org.opendaylight.controller.yang2sources.spi.CodeGeneratorTestImpl");
    }

    @Test
    public void testMissingYangInDep() throws VerificationException {
        try {
            setUp("MissingYangInDep/", false);
        } catch (VerificationException e) {
            assertVerificationException(
                    e,
                    "org.opendaylight.controller.yang.parser.util.YangValidationException: Not existing module imported:unknownDep:2013-02-27 by:private:2013-02-27");
            return;
        }

        fail("Verification exception should have been thrown");
    }

    static void verifyCorrectLog(Verifier v) throws VerificationException {
        v.verifyErrorFreeLog();
        v.verifyTextInLog("[INFO] yang-to-sources: YANG files parsed from");
        v.verifyTextInLog("[INFO] yang-to-sources: Code generator instantiated from org.opendaylight.controller.yang2sources.spi.CodeGeneratorTestImpl");
        v.verifyTextInLog("[INFO] yang-to-sources: Sources generated by org.opendaylight.controller.yang2sources.spi.CodeGeneratorTestImpl: null");
    }

    @Test
    public void testNoGenerators() throws VerificationException {
        Verifier v = setUp("NoGenerators/", false);
        v.verifyErrorFreeLog();
        v.verifyTextInLog("[WARNING] yang-to-sources: No code generators provided");
    }

    @Test
    public void testUnknownGenerator() throws VerificationException {
        Verifier v = setUp("UnknownGenerator/", true);
        v.verifyTextInLog("[ERROR] yang-to-sources: Unable to generate sources with unknown generator");
        v.verifyTextInLog("java.lang.ClassNotFoundException: unknown");
        v.verifyTextInLog("[INFO] yang-to-sources: Code generator instantiated from org.opendaylight.controller.yang2sources.spi.CodeGeneratorTestImpl");
        v.verifyTextInLog("[INFO] yang-to-sources: Sources generated by org.opendaylight.controller.yang2sources.spi.CodeGeneratorTestImpl: null");
        v.verifyTextInLog("[ERROR] yang-to-sources: One or more code generators failed, including failed list(generatorClass=exception) {unknown=java.lang.ClassNotFoundException}");
    }

    @Test
    public void testNoYangFiles() throws VerificationException {
        Verifier v = setUp("NoYangFiles/", false);
        v.verifyTextInLog("[INFO] yang-to-sources: YANG files parsed from []");
        v.verifyTextInLog("[INFO] yang-to-sources: Code generator instantiated from org.opendaylight.controller.yang2sources.spi.CodeGeneratorTestImpl");
        v.verifyTextInLog("[INFO] yang-to-sources: Sources generated by org.opendaylight.controller.yang2sources.spi.CodeGeneratorTestImpl: null");
    }

    static void assertVerificationException(VerificationException e,
            String string) {
        assertThat(e.getMessage(), containsString(string));
    }

    static Verifier setUp(String project, boolean ignoreF)
            throws VerificationException {
        final URL path = YangToSourcesPluginTestIT.class.getResource("/"
                + project + "pom.xml");
        File parent = new File(path.getPath());
        Verifier verifier = new Verifier(parent.getParent());
        if (ignoreF)
            verifier.addCliOption("-fn");
        verifier.setMavenDebug(true);
        verifier.executeGoal("generate-sources");
        return verifier;
    }

    @Test
    public void testNoOutputDir() throws VerificationException {
        Verifier v = YangToSourcesPluginTestIT.setUp("NoOutputDir/", false);
        verifyCorrectLog(v);
    }

    @Test
    public void testFindResourceOnCp() throws VerificationException {
        Verifier v1 = new Verifier(new File(getClass().getResource(
                "/GenerateTest1/pom.xml").getPath()).getParent());
        v1.executeGoal("clean");
        v1.executeGoal("package");
        v1.assertFilePresent("target/classes/META-INF/yang/testfile1.yang");
        v1.assertFilePresent("target/classes/META-INF/yang/testfile2.yang");
        v1.assertFilePresent("target/classes/META-INF/yang/testfile3.yang");

        Verifier v2 = YangToSourcesPluginTestIT.setUp("GenerateTest2/", false);
        v2.executeGoal("clean");
        v2.executeGoal("package");
        v2.assertFilePresent("target/classes/META-INF/yang/private.yang");
        v2.assertFileNotPresent("target/classes/META-INF/yang/testfile1.yang");
        v2.assertFileNotPresent("target/classes/META-INF/yang/testfile2.yang");
        v2.assertFileNotPresent("target/classes/META-INF/yang/testfile3.yang");
    }
}
