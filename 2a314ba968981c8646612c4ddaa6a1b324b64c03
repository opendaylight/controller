{
  "comments": [
    {
      "key": {
        "uuid": "fa82b9bf_41008533",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/TransactionProxy.java",
        "patchSetId": 4
      },
      "lineNbr": 252,
      "author": {
        "id": 807
      },
      "writtenOn": "2014-08-22T20:28:23Z",
      "side": 1,
      "message": "Are you planning to change this to executeShardOperationAsync?",
      "revId": "2a314ba968981c8646612c4ddaa6a1b324b64c03",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa82b9bf_1c70a609",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/TransactionProxy.java",
        "patchSetId": 4
      },
      "lineNbr": 252,
      "author": {
        "id": 1842
      },
      "writtenOn": "2014-08-23T03:53:38Z",
      "side": 1,
      "message": "Good point but unfortunately I think this is the case where we need a sync call. In order to perform any read/write/merge/delete operation we need a shard Tx actor to talk to. This is what the CreateTransaction message to the Shard actor does, ie it creates a Tx actor and returns its path. From there, we create a TransactionContextImpl instance to which we delegate the subsequent  read/write/merge/delete requests. This method is called on the first  read/write/merge/delete request for a path and, while we could send the CreateTransaction async, we would have to immediately wait for its completion in order to complete the request. So I didn\u0027t think there was much point to making it async.",
      "parentUuid": "fa82b9bf_41008533",
      "revId": "2a314ba968981c8646612c4ddaa6a1b324b64c03",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa82b9bf_dc4c7eca",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/TransactionProxy.java",
        "patchSetId": 4
      },
      "lineNbr": 252,
      "author": {
        "id": 807
      },
      "writtenOn": "2014-08-23T05:32:38Z",
      "side": 1,
      "message": "How about using using callbacks on the future returned from the async call? Or using a mapper as illustrated here (http://doc.akka.io/docs/akka/2.3.5/java/futures.html).\n\nBTW, I have used mapper in another component (sal-remoterpc-connector: org.opendaylight.controller.remote.rpc.registry.gossip.Gossiper) where ever such synchronous responses where needed. \n\nWould that not work in this case?",
      "parentUuid": "fa82b9bf_1c70a609",
      "revId": "2a314ba968981c8646612c4ddaa6a1b324b64c03",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa82b9bf_1c8c26d9",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/TransactionProxy.java",
        "patchSetId": 4
      },
      "lineNbr": 252,
      "author": {
        "id": 1842
      },
      "writtenOn": "2014-08-23T12:49:44Z",
      "side": 1,
      "message": "This part is tricky - it\u0027s kind of a chicken and the egg thing here. The Tx operations are done in the TransactionContextImpl class but, if we get here, then we don\u0027t have  a TransactionContextImpl instance yet. We may be able to do this with Future transforms so we don\u0027t have to block. The trickiness would come with the next Tx operation call by the client. I\u0027ll have to think about it some more. \n\nMoiz and I intended to first handle put/merge/delete errors async, then handle readyTransaction async, then look at handling initial Tx create async, i.e. do them in stages. I\u0027ve the actually done the first 2 in this patch b/c it turns out they went hand-in-hand. I\u0027d prefer to defer the 3rd to another patch, if we decide it\u0027s reasonably possible to do it async.",
      "parentUuid": "fa82b9bf_dc4c7eca",
      "revId": "2a314ba968981c8646612c4ddaa6a1b324b64c03",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa82b9bf_81144d4d",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/TransactionProxy.java",
        "patchSetId": 4
      },
      "lineNbr": 396,
      "author": {
        "id": 807
      },
      "writtenOn": "2014-08-22T20:28:23Z",
      "side": 1,
      "message": "reply.getCohortPath() gives ActorPath that can be used with actorSelection below. Is there a need to convert it to string and resolve it?",
      "revId": "2a314ba968981c8646612c4ddaa6a1b324b64c03",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa82b9bf_3c6b2a1f",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/TransactionProxy.java",
        "patchSetId": 4
      },
      "lineNbr": 396,
      "author": {
        "id": 1842
      },
      "writtenOn": "2014-08-23T03:53:38Z",
      "side": 1,
      "message": "Not sure. This is the way it was and getResolvedCohortPath is even deprecated with comments similar to yours. I\u0027ll defer to the akka experts to clean this up.",
      "parentUuid": "fa82b9bf_81144d4d",
      "revId": "2a314ba968981c8646612c4ddaa6a1b324b64c03",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa82b9bf_410ac526",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/TransactionProxy.java",
        "patchSetId": 4
      },
      "lineNbr": 401,
      "author": {
        "id": 807
      },
      "writtenOn": "2014-08-22T20:28:23Z",
      "side": 1,
      "message": "actorFor is deprecated. Use actorSelection.",
      "revId": "2a314ba968981c8646612c4ddaa6a1b324b64c03",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa82b9bf_dc755efa",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/TransactionProxy.java",
        "patchSetId": 4
      },
      "lineNbr": 401,
      "author": {
        "id": 1842
      },
      "writtenOn": "2014-08-23T03:53:38Z",
      "side": 1,
      "message": "See above - this is the way it was (I simply moved the code). Can you create a separate bug to fix this appropriately?",
      "parentUuid": "fa82b9bf_410ac526",
      "revId": "2a314ba968981c8646612c4ddaa6a1b324b64c03",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa82b9bf_fc4702a1",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/TransactionProxy.java",
        "patchSetId": 4
      },
      "lineNbr": 401,
      "author": {
        "id": 807
      },
      "writtenOn": "2014-08-23T05:32:38Z",
      "side": 1,
      "message": "Done.\nhttps://bugs.opendaylight.org/show_bug.cgi?id\u003d1607",
      "parentUuid": "fa82b9bf_dc755efa",
      "revId": "2a314ba968981c8646612c4ddaa6a1b324b64c03",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}