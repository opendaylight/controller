{
  "comments": [
    {
      "key": {
        "uuid": "fafc7978_07b35a4d",
        "filename": "opendaylight/md-sal/samples/clustering-test-app/provider/src/main/java/org/opendaylight/controller/clustering/it/provider/impl/WriteTransactionsHandler.java",
        "patchSetId": 4
      },
      "lineNbr": 103,
      "author": {
        "id": 2046
      },
      "writtenOn": "2017-03-09T12:26:22Z",
      "side": 1,
      "message": "It may be a good idea to include this in start() instead, in order to report possible failure to settableFuture.",
      "range": {
        "startLine": 103,
        "startChar": 8,
        "endLine": 103,
        "endChar": 26
      },
      "revId": "1d934d17917a4df6ebb2c2b0bfc259aa3b501973",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_67850659",
        "filename": "opendaylight/md-sal/samples/clustering-test-app/provider/src/main/java/org/opendaylight/controller/clustering/it/provider/impl/WriteTransactionsHandler.java",
        "patchSetId": 4
      },
      "lineNbr": 106,
      "author": {
        "id": 2046
      },
      "writtenOn": "2017-03-09T12:26:22Z",
      "side": 1,
      "message": "This is only called from one place. Why is this a separate method?",
      "range": {
        "startLine": 106,
        "startChar": 17,
        "endLine": 106,
        "endChar": 33
      },
      "revId": "1d934d17917a4df6ebb2c2b0bfc259aa3b501973",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_04523834",
        "filename": "opendaylight/md-sal/samples/clustering-test-app/provider/src/main/java/org/opendaylight/controller/clustering/it/provider/impl/WriteTransactionsHandler.java",
        "patchSetId": 4
      },
      "lineNbr": 124,
      "author": {
        "id": 2046
      },
      "writtenOn": "2017-03-09T12:26:22Z",
      "side": 1,
      "message": "The yang model also says:\n\"To ensure balanced number of deletes, the first write can create a random set of numbers.\"",
      "range": {
        "startLine": 124,
        "startChar": 8,
        "endLine": 124,
        "endChar": 9
      },
      "revId": "1d934d17917a4df6ebb2c2b0bfc259aa3b501973",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_c422f0b7",
        "filename": "opendaylight/md-sal/samples/clustering-test-app/provider/src/main/java/org/opendaylight/controller/clustering/it/provider/impl/WriteTransactionsHandler.java",
        "patchSetId": 4
      },
      "lineNbr": 131,
      "author": {
        "id": 2046
      },
      "writtenOn": "2017-03-09T12:26:22Z",
      "side": 1,
      "message": "With DataBrokerBackedProvider this could easily lead to multiple transactions trying to access the same item at once.\n\nThe Yang model suggests:\n\"The recommended way is to require the random number has low significant bits different than the past ~100k numbers.\"",
      "range": {
        "startLine": 131,
        "startChar": 29,
        "endLine": 131,
        "endChar": 50
      },
      "revId": "1d934d17917a4df6ebb2c2b0bfc259aa3b501973",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_2405bc13",
        "filename": "opendaylight/md-sal/samples/clustering-test-app/provider/src/main/java/org/opendaylight/controller/clustering/it/provider/impl/WriteTransactionsHandler.java",
        "patchSetId": 4
      },
      "lineNbr": 136,
      "author": {
        "id": 2046
      },
      "writtenOn": "2017-03-09T12:26:22Z",
      "side": 1,
      "message": "txProvider.createTransaction",
      "range": {
        "startLine": 136,
        "startChar": 43,
        "endLine": 136,
        "endChar": 80
      },
      "revId": "1d934d17917a4df6ebb2c2b0bfc259aa3b501973",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_07451a42",
        "filename": "opendaylight/md-sal/samples/clustering-test-app/provider/src/main/java/org/opendaylight/controller/clustering/it/provider/impl/WriteTransactionsHandler.java",
        "patchSetId": 4
      },
      "lineNbr": 153,
      "author": {
        "id": 2046
      },
      "writtenOn": "2017-03-09T12:26:22Z",
      "side": 1,
      "message": "txProvider.submit(tx)\n\nTxChainBackedProvider would want to perform tx.submit() in a callback to the previously submitted transaction, in order to ensure transactions are submitted in order.",
      "range": {
        "startLine": 153,
        "startChar": 20,
        "endLine": 153,
        "endChar": 31
      },
      "revId": "1d934d17917a4df6ebb2c2b0bfc259aa3b501973",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_c48670b8",
        "filename": "opendaylight/md-sal/samples/clustering-test-app/provider/src/main/java/org/opendaylight/controller/clustering/it/provider/impl/WriteTransactionsHandler.java",
        "patchSetId": 4
      },
      "lineNbr": 210,
      "author": {
        "id": 2046
      },
      "writtenOn": "2017-03-09T12:26:22Z",
      "side": 1,
      "message": "The test plan requires no conflicting modifications happen, the Yang model realizes it by allowing each member to write into different id.\n\nSo when the chain fails it is a bug. RPC should exit early if possible, or at least writer should stop writing.\nRe-create of transaction chain should never be needed.",
      "range": {
        "startLine": 210,
        "startChar": 35,
        "endLine": 210,
        "endChar": 68
      },
      "revId": "1d934d17917a4df6ebb2c2b0bfc259aa3b501973",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}