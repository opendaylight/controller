# Extra packages to import from the boot class loader
org.osgi.framework.system.packages.extra=org.apache.karaf.branding,sun.reflect,sun.reflect.misc,sun.misc,sun.nio.ch

# https://bugs.eclipse.org/bugs/show_bug.cgi?id=325578
# Extend the framework to avoid the resources to be presented with
# a URL of type bundleresource: but to be presented as file:
osgi.hook.configurators.include=org.eclipse.virgo.kernel.equinox.extensions.hooks.ExtensionsHookConfigurator

# Embedded Tomcat configuration File
org.eclipse.gemini.web.tomcat.config.path=configuration/tomcat-server.xml
org.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH=true

# Use Equinox as default OSGi Framework Implementation
karaf.framework=equinox

# Show a progress bar on startup and start the console when all bundles are up and running.
# (If you are in a hurry you can still type enter to start the shell faster.)
karaf.delay.console=true

# Set security provider to BouncyCastle
org.apache.karaf.security.providers = org.bouncycastle.jce.provider.BouncyCastleProvider

# We set this to false to disable the Aries BlueprintExtender from doing its orderly container
# shutdown so we can do it after the CSS has shut down all its modules. Otherwise Aries will
# shutdown blueprint containers when the karaf framework starts shutdown (ie when bundle 0 is
# stopped) which can cause failures on CSS module shutdown due to the core blueprint containers
# and services already being shut down. This setting can be removed when/if CSS is removed
# completely from ODL.
org.apache.aries.blueprint.preemptiveShutdown=false

netconf.config.persister.active=1

netconf.config.persister.1.storageAdapterClass=org.opendaylight.controller.config.persist.storage.file.xml.XmlFileStorageAdapter
netconf.config.persister.1.properties.fileStorage=etc/opendaylight/current/controller.currentconfig.xml
netconf.config.persister.1.properties.numberOfBackups=1

# logback configuration
logback.configurationFile=configuration/logback.xml

# Container configuration
container.profile = Container

# Connection manager configuration
connection.scheme = ANY_CONTROLLER_ONE_MASTER

# OVSDB configuration
# ovsdb plugin supports both active and passive connections. It listens on port 6640 by default for Active connections.
ovsdb.listenPort=6640

# ovsdb creates Openflow nodes/bridges. This configuration configures the bridge's Openflow version.
# default Openflow version = 1.0, we also support 1.3.
# ovsdb.of.version=1.3

# ovsdb can be configured with ml2 to perform l3 forwarding. The config below enables that functionality, which is
# disabled by default.
# ovsdb.l3.fwd.enabled=yes

# ovsdb can be configured with ml2 to perform arp responder, enabled by default.
ovsdb.l3.arp.responder.disabled=no

# ovsdb can be configured with ml2 to perform l3 forwarding. When used in that scenario, the mac address of the default
# gateway --on the external subnet-- is expected to be resolved from its inet address. The config below overrides that
# specific arp/neighDiscovery lookup.
# ovsdb.l3gateway.mac=00:00:5E:00:02:01

# TLS configuration
# To enable TLS, set secureChannelEnabled=true and specify the location of controller Java KeyStore and TrustStore files.
# The Java KeyStore contains controller's private key and certificate. The Java TrustStore contains the trusted certificate
# entries, including switches' Certification Authority (CA) certificates. For example,
# secureChannelEnabled=true
# controllerKeyStore=./configuration/ctlKeyStore
# controllerKeyStorePassword=xxxxxxxx (this password should match the password used for KeyStore generation and at least 6 characters)
# controllerTrustStore=./configuration/ctlTrustStore
# controllerTrustStorePassword=xxxxxxxx (this password should match the password used for TrustStore generation and at least 6 characters)

secureChannelEnabled=false
controllerKeyStore=
controllerKeyStorePassword=
controllerTrustStore=
controllerTrustStorePassword=

# User Manager configurations
enableStrongPasswordCheck = false

#Jolokia configurations
#org.jolokia.listenForHttpService=false

# Logging configuration for Tomcat-JUL logging
java.util.logging.config.file=configuration/tomcat-logging.properties

#Hosttracker hostsdb key scheme setting
hosttracker.keyscheme=IP

# LISP Flow Mapping configuration
# Map-Register messages overwrite existing RLOC sets in EID-to-RLOC mappings (default: true)
lisp.mappingOverwrite = true
# Enable the Solicit-Map-Request (SMR) mechanism (default: true)
lisp.smr = true
# Choose policy for Explicit Locator Path (ELP) handling
# There are three options:
#   default: don't add or remove locator records, return mapping as-is
#   both: keep the ELP, but add the next hop as a standalone non-LCAF locator with a lower priority
#   replace: remove the ELP, add the next hop as a standalone non-LCAF locator
lisp.elpPolicy = default

