{
  "comments": [
    {
      "key": {
        "uuid": "373b334d_6e7e34b8",
        "filename": "opendaylight/md-sal/sal-remoterpc-connector/src/main/java/org/opendaylight/controller/remote/rpc/OpsInvoker.java",
        "patchSetId": 10
      },
      "lineNbr": 135,
      "author": {
        "id": 8453
      },
      "writtenOn": "2019-07-04T10:12:33Z",
      "side": 1,
      "message": "why is the response for the action response so different compared to the rpc response, considering they should both response function in nearly the same way? or should the rpc code above be changed to match the action response code here?",
      "range": {
        "startLine": 132,
        "startChar": 12,
        "endLine": 135,
        "endChar": 13
      },
      "revId": "963ffbe65bdc03c98f21d685284cc05c8e6c9df4",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77b7ae3b_b0092349",
        "filename": "opendaylight/md-sal/sal-remoterpc-connector/src/main/java/org/opendaylight/controller/remote/rpc/OpsInvoker.java",
        "patchSetId": 10
      },
      "lineNbr": 135,
      "author": {
        "id": 649
      },
      "writtenOn": "2019-07-04T12:17:09Z",
      "side": 1,
      "message": "legacy RPC behavior, see javadoc of this class. we do not want to carry that over to actions.\n\nwe can fix RPC invocations, but that would be a separate patch, which needs careful consideration.",
      "parentUuid": "373b334d_6e7e34b8",
      "range": {
        "startLine": 132,
        "startChar": 12,
        "endLine": 135,
        "endChar": 13
      },
      "revId": "963ffbe65bdc03c98f21d685284cc05c8e6c9df4",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ead680f_aa54040b",
        "filename": "opendaylight/md-sal/sal-remoterpc-connector/src/main/java/org/opendaylight/controller/remote/rpc/messages/ExecuteRpc.java",
        "patchSetId": 10
      },
      "lineNbr": 36,
      "author": {
        "id": 8453
      },
      "writtenOn": "2019-07-04T14:25:44Z",
      "side": 1,
      "message": "do you mean to use type.getParent().getParent() ? from what I can see from the SchemaPath class implementation even if I create a SchemaPath with no parents the returned value will still have an AbsolouteSchemaPath or RelativeSchemaPath as its parent:\n\npublic static SchemaPath create(final boolean absolute, final QName... path) {\n        return create(Arrays.asList(path), absolute);\n    }\n\npublic static SchemaPath create(final Iterable\u003cQName\u003e path, final boolean absolute) {\n        final SchemaPath parent \u003d absolute ? ROOT : SAME;\n        return parent.createChild(path);\n    }\n\nlikewise for ExecuteAction",
      "range": {
        "startLine": 36,
        "startChar": 14,
        "endLine": 36,
        "endChar": 31
      },
      "revId": "963ffbe65bdc03c98f21d685284cc05c8e6c9df4",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c75cb302_bcc6a78d",
        "filename": "opendaylight/md-sal/sal-remoterpc-connector/src/main/java/org/opendaylight/controller/remote/rpc/messages/ExecuteRpc.java",
        "patchSetId": 10
      },
      "lineNbr": 36,
      "author": {
        "id": 649
      },
      "writtenOn": "2019-07-04T14:35:58Z",
      "side": 1,
      "message": "ah, darn, I forgot about that additional level. The intent is to efficiently check if SchemaPath has more than one element, but we *also* could end up having SchemaPath.ROOT -- which would incur NPE from a straight getParent().getParent().",
      "parentUuid": "8ead680f_aa54040b",
      "range": {
        "startLine": 36,
        "startChar": 14,
        "endLine": 36,
        "endChar": 31
      },
      "revId": "963ffbe65bdc03c98f21d685284cc05c8e6c9df4",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}