{
  "comments": [
    {
      "key": {
        "uuid": "3a65312a_70ed5025",
        "filename": "opendaylight/blueprint/src/main/java/org/opendaylight/controller/blueprint/BlueprintContainerRestartServiceImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 149,
      "author": {
        "id": 1842
      },
      "writtenOn": "2016-11-14T17:15:41Z",
      "side": 1,
      "message": "\"they \u0027re\" -\u003e they\u0027re",
      "revId": "39282ebfb1f7c4117dd0447fb2681f18665de225",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a65312a_308c787f",
        "filename": "opendaylight/blueprint/src/main/java/org/opendaylight/controller/blueprint/BlueprintContainerRestartServiceImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 150,
      "author": {
        "id": 1842
      },
      "writtenOn": "2016-11-14T17:15:41Z",
      "side": 1,
      "message": "space after \"stop.\"",
      "revId": "39282ebfb1f7c4117dd0447fb2681f18665de225",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a65312a_90eaac0d",
        "filename": "opendaylight/blueprint/src/main/java/org/opendaylight/controller/blueprint/BlueprintContainerRestartServiceImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 152,
      "author": {
        "id": 1842
      },
      "writtenOn": "2016-11-14T17:15:41Z",
      "side": 1,
      "message": "space after \"created.\"",
      "revId": "39282ebfb1f7c4117dd0447fb2681f18665de225",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a65312a_90bd8c6b",
        "filename": "opendaylight/blueprint/src/main/java/org/opendaylight/controller/blueprint/BlueprintContainerRestartServiceImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 172,
      "author": {
        "id": 1842
      },
      "writtenOn": "2016-11-14T17:15:41Z",
      "side": 1,
      "message": "From the API, there\u0027s no guarantee that this method is called once atomically for all requested bundles. In fact, the BlueprintQuiesceParticipant quiesces each bundle on separate threads and notifies the callback one bundle at a time. So I think what we need to do here is use an AtomicInteger to count down the expected bundles and then destroy them when it reaches 0. \n\nI set a breakpoint in BlueprintQuiesceParticipant, which is the backing QuiesceParticipant service created by the BlueprintExtender, but it\u0027s never called on karaf shutdown so it\u0027s not clear what the intent is. BlueprintContainerImpl#quiesce is called from the BlueprintQuiesceParticipant and it does some shut down but not everything that destroy does. Again, not clear what their intent is but it seems the user still needs to call destroy to fully clean everything. This will result in 2 BlueprintEvent.DESTROYING events generated which is probably benign. Also it\u0027s not clear why quiesce() unregisters the BlueprintContainer service but destroy doesn\u0027t - that\u0027s what causes the leak. It seems like an oversight/bug - we probably should file a bug for that. For now, it seems our only recourse is to invoke the quiesce stuff to workaround the leak.\n\nBTW - nice find on the QuiesceParticipant service.",
      "revId": "39282ebfb1f7c4117dd0447fb2681f18665de225",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}