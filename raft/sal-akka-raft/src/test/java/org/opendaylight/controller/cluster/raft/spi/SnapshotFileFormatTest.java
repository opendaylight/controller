/*
 * Copyright (c) 2025 PANTHEON.tech, s.r.o. and others.  All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */
package org.opendaylight.controller.cluster.raft.spi;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.params.provider.Arguments.arguments;

import java.io.ByteArrayOutputStream;
import java.io.ObjectOutputStream;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.time.Instant;
import java.util.HexFormat;
import java.util.List;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.io.TempDir;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.opendaylight.controller.cluster.raft.ReplicatedLogEntry;
import org.opendaylight.controller.cluster.raft.persisted.ByteState;
import org.opendaylight.controller.cluster.raft.persisted.ByteStateSnapshotCohort;
import org.opendaylight.controller.cluster.raft.persisted.ClusterConfig;
import org.opendaylight.controller.cluster.raft.persisted.ServerInfo;
import org.opendaylight.controller.cluster.raft.persisted.SimpleReplicatedLogEntry;
import org.opendaylight.controller.cluster.raft.persisted.Snapshot;
import org.opendaylight.controller.cluster.raft.spi.SnapshotFile.RaftRecovery;
import org.opendaylight.raft.api.EntryInfo;
import org.opendaylight.raft.api.TermInfo;
import org.opendaylight.raft.spi.CompressionSupport;

class SnapshotFileFormatTest {
    // see https://www.trcp.org/2011/01/18/it-is-not-the-critic-who-counts/
    private static final ByteState STATE = ByteState.of("""
        It is not the critic who counts: not the man who points out how the strong man stumbles or where the doer of \
        deeds could have done better. The credit belongs to the man who is actually in the arena, whose face is marred \
        by dust and sweat and blood, who strives valiantly, who errs and comes up short again and again, because there \
        is no effort without error or shortcoming, but who knows the great enthusiasms, the great devotions, who spends\
         himself in a worthy cause; who, at the best, knows, in the end, the triumph of high achievement, and who, at \
        the worst, if he fails, at least he fails while daring greatly, so that his place shall never be with those \
        cold and timid souls who knew neither victory nor defeat.
        â€”Theodore Roosevelt
        Speech at the Sorbonne, Paris, April 23, 1910""".getBytes(StandardCharsets.UTF_8));
    private static final ByteStateSnapshotCohort STATE_SUPPORT = () -> {
        throw new UnsupportedOperationException();
    };
    private static final Instant TIMESTAMP = Instant.ofEpochSecond(1743608039, 960467747);
    private static final ClusterConfig SERVER_CONFIG = new ClusterConfig(List.of(
        new ServerInfo("member-1", false), new ServerInfo("member-2", true)));
    private static final List<ReplicatedLogEntry> ENTRIES = List.of(
        new SimpleReplicatedLogEntry(0, 0, SERVER_CONFIG),
        new SimpleReplicatedLogEntry(1, 0, new ClusterConfig(List.of(
            new ServerInfo("member-1", true), new ServerInfo("member-2", false)))));

    @TempDir
    private Path tempDir;

    @BeforeAll
    static void beforeAll() {
        assertEquals("ByteState{length=785}", STATE.toString());
        assertEquals("2025-04-02T15:33:59.960467747Z", TIMESTAMP.toString());
        assertSame(SnapshotFileFormat.SNAPSHOT_V1, SnapshotFileFormat.latest());
    }

    @ParameterizedTest
    @MethodSource
    void legacySizes(final CompressionSupport compressed, final long expectedSize) throws Exception {
        // Not quite what LocalSnapshotStore is doing, but close enough for comparison
        try (var baos = new ByteArrayOutputStream()) {
            try (var oos = new ObjectOutputStream(compressed.encodeOutput(baos))) {
                oos.writeObject(Snapshot.create(STATE, ENTRIES, -1, -1, -1, -1, TermInfo.INITIAL, SERVER_CONFIG));
            }

            assertEquals(expectedSize, baos.size());
        }
    }

    private static List<Arguments> legacySizes() {
        return List.of(
            arguments(CompressionSupport.NONE, 1191),
            arguments(CompressionSupport.LZ4, 944));
    }

    @ParameterizedTest
    @MethodSource
    void createAndOpen(final String extension, final CompressionSupport entryCompress,
            final CompressionSupport stateCompress, final long expectedSize, final String expectedBytes)
                throws Exception {
        final var fileName = "test" + extension;
        final var fileFormat = SnapshotFileFormat.forFileName(fileName);
        assertNotNull(fileFormat);

        final var file = tempDir.resolve(fileName);
        fileFormat.createNew(file, TIMESTAMP, EntryInfo.of(-1, -1), SERVER_CONFIG, entryCompress, ENTRIES,
            stateCompress, ByteState.writer(), STATE);

        assertTrue(Files.isRegularFile(file));
        assertEquals(expectedSize, Files.size(file));
        assertEquals(expectedBytes, HexFormat.of().withUpperCase().formatHex(Files.readAllBytes(file)));

        final var open = fileFormat.open(file);
        assertEquals(EntryInfo.of(-1, -1), open.lastIncluded());
        assertEquals(TIMESTAMP, open.timestamp());

        assertEquals(new RaftRecovery(SERVER_CONFIG, ENTRIES), open.readRaftRecovery());

        final var encSource = open.dataSource();
        final var plainSource = encSource.toPlainSource();
        assertEquals(STATE, STATE_SUPPORT.deserializeSnapshot(plainSource));
    }

    private static List<Arguments> createAndOpen() {
        return List.of(
            // Note: vs. 1191, clear win: no Serializable overhead
            arguments(".v1", CompressionSupport.NONE, CompressionSupport.NONE, 1059, """
                B7804CE300000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF12010000000000002304000000000000E758ED670000000023933F3\
                98F3755FA0000000200086D656D6265722D310000086D656D6265722D320100000002ACED000577080000000000000000737200\
                536F72672E6F70656E6461796C696768742E636F6E74726F6C6C65722E636C75737465722E726166742E7065727369737465642\
                E536572766572436F6E66696775726174696F6E5061796C6F61642450726F787900000000000000010C00007870770400000002\
                7400086D656D6265722D317701007400086D656D6265722D3277010178770800000000000000007371007E00007704000000027\
                1007E000277010171007E0003770100784974206973206E6F7420746865206372697469632077686F20636F756E74733A206E6F\
                7420746865206D616E2077686F20706F696E7473206F757420686F7720746865207374726F6E67206D616E207374756D626C657\
                3206F722077686572652074686520646F6572206F6620646565647320636F756C64206861766520646F6E65206265747465722E\
                20546865206372656469742062656C6F6E677320746F20746865206D616E2077686F2069732061637475616C6C7920696E20746\
                865206172656E612C2077686F73652066616365206973206D6172726564206279206475737420616E6420737765617420616E64\
                20626C6F6F642C2077686F20737472697665732076616C69616E746C792C2077686F206572727320616E6420636F6D657320757\
                02073686F727420616761696E20616E6420616761696E2C2062656361757365207468657265206973206E6F206566666F727420\
                776974686F7574206572726F72206F722073686F7274636F6D696E672C206275742077686F206B6E6F777320746865206772656\
                17420656E746875736961736D732C20746865206772656174206465766F74696F6E732C2077686F207370656E64732068696D73\
                656C6620696E206120776F727468792063617573653B2077686F2C2061742074686520626573742C206B6E6F77732C20696E207\
                4686520656E642C2074686520747269756D7068206F66206869676820616368696576656D656E742C20616E642077686F2C2061\
                742074686520776F7273742C206966206865206661696C732C206174206C65617374206865206661696C73207768696C6520646\
                172696E672067726561746C792C20736F20746861742068697320706C616365207368616C6C206E657665722062652077697468\
                2074686F736520636F6C6420616E642074696D696420736F756C732077686F206B6E6577206E65697468657220766963746F727\
                9206E6F72206465666561742E0AE280945468656F646F726520526F6F736576656C740A5370656563682061742074686520536F\
                72626F6E6E652C2050617269732C20417072696C2032332C2031393130"""),
            arguments(".v1", CompressionSupport.NONE, CompressionSupport.LZ4, 964, """
                B7804CE300008000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1201000000000000C403000000000000E758ED670000000023933F3\
                94A0C0B2D0000000200086D656D6265722D310000086D656D6265722D320100000002ACED000577080000000000000000737200\
                536F72672E6F70656E6461796C696768742E636F6E74726F6C6C65722E636C75737465722E726166742E7065727369737465642\
                E536572766572436F6E66696775726174696F6E5061796C6F61642450726F787900000000000000010C00007870770400000002\
                7400086D656D6265722D317701007400086D656D6265722D3277010178770800000000000000007371007E00007704000000027\
                1007E000277010171007E00037701007804224D186050FBA3020000F5114974206973206E6F7420746865206372697469632077\
                686F20636F756E74733A1B00316D616E1800E1706F696E7473206F757420686F773600617374726F6E672200F1027374756D626\
                C6573206F722077686572652100D0646F6572206F662064656564735A00606C64206861761900C16E65206265747465722E2054\
                8100F100656469742062656C6F6E677320746F4000005A00009400E169732061637475616C6C7920696E1B00606172656E612C9\
                A007073652066616365CF00F2086D6172726564206279206475737420616E6420737765610A0051626C6F6F643200F203207374\
                72697665732076616C69616E746C79170041657272733500F105636F6D65732075702073686F727420616761696E1900010A008\
                12C20626563617573E40011727900606E6F206566662C0040776974682401506572726F720E01014300B0636F6D696E672C2062\
                7574B30061206B6E6F7773C800206772A000C7656E746875736961736D732C1700926465766F74696F6E73A000E07370656E647\
                32068696D73656C660A01916120776F72746879209000103B5C00322C2061D40152626573742C6A00102C2C0000E80132656E64\
                600070747269756D70689D01F1026869676820616368696576656D656E742CEA00084A0030776F724B0040696620686C0131696\
                C736500556C656173741300D2207768696C6520646172696E67D7000058011073CA019061742068697320706CA801E17368616C\
                6C206E657665722062653101212074C70141636F6C647D009174696D696420736F755700F4306F206B6E6577206E65697468657\
                220766963746F7279206E6F72206465666561742E0AE280945468656F646F726520526F6F736576656C740A5370656563681001\
                F010536F72626F6E6E652C2050617269732C20417072696C2032332C203139313000000000"""),
            arguments(".v1", CompressionSupport.LZ4, CompressionSupport.NONE, 1050, """
                B7804CE300800000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF09010000000000001A04000000000000E758ED670000000023933F3\
                98BEC31380000000200086D656D6265722D310000086D656D6265722D32010000000204224D186050FBA400000073ACED000577\
                08000100F348737200536F72672E6F70656E6461796C696768742E636F6E74726F6C6C65722E636C75737465722E726166742E7\
                065727369737465642E536572766572436F6E66696775726174696F6E5061796C6F61642450726F78795F00F60B010C00007870\
                7704000000027400086D656D6265722D317701000E0057327701017891005271007E00003300000B00D00277010171007E00037\
                7010078000000004974206973206E6F7420746865206372697469632077686F20636F756E74733A206E6F7420746865206D616E\
                2077686F20706F696E7473206F757420686F7720746865207374726F6E67206D616E207374756D626C6573206F7220776865726\
                52074686520646F6572206F6620646565647320636F756C64206861766520646F6E65206265747465722E205468652063726564\
                69742062656C6F6E677320746F20746865206D616E2077686F2069732061637475616C6C7920696E20746865206172656E612C2\
                077686F73652066616365206973206D6172726564206279206475737420616E6420737765617420616E6420626C6F6F642C2077\
                686F20737472697665732076616C69616E746C792C2077686F206572727320616E6420636F6D65732075702073686F727420616\
                761696E20616E6420616761696E2C2062656361757365207468657265206973206E6F206566666F727420776974686F75742065\
                72726F72206F722073686F7274636F6D696E672C206275742077686F206B6E6F77732074686520677265617420656E746875736\
                961736D732C20746865206772656174206465766F74696F6E732C2077686F207370656E64732068696D73656C6620696E206120\
                776F727468792063617573653B2077686F2C2061742074686520626573742C206B6E6F77732C20696E2074686520656E642C207\
                4686520747269756D7068206F66206869676820616368696576656D656E742C20616E642077686F2C2061742074686520776F72\
                73742C206966206865206661696C732C206174206C65617374206865206661696C73207768696C6520646172696E67206772656\
                1746C792C20736F20746861742068697320706C616365207368616C6C206E6576657220626520776974682074686F736520636F\
                6C6420616E642074696D696420736F756C732077686F206B6E6577206E65697468657220766963746F7279206E6F72206465666\
                561742E0AE280945468656F646F726520526F6F736576656C740A5370656563682061742074686520536F72626F6E6E652C2050\
                617269732C20417072696C2032332C2031393130"""),
            // Note: vs. 944 , slight loss: we have uncompressed header and two separate LZ4 streams
            arguments(".v1", CompressionSupport.LZ4, CompressionSupport.LZ4, 955, """
                B7804CE300808000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0901000000000000BB03000000000000E758ED670000000023933F3\
                93D1324B10000000200086D656D6265722D310000086D656D6265722D32010000000204224D186050FBA400000073ACED000577\
                08000100F348737200536F72672E6F70656E6461796C696768742E636F6E74726F6C6C65722E636C75737465722E726166742E7\
                065727369737465642E536572766572436F6E66696775726174696F6E5061796C6F61642450726F78795F00F60B010C00007870\
                7704000000027400086D656D6265722D317701000E0057327701017891005271007E00003300000B00D00277010171007E00037\
                70100780000000004224D186050FBA3020000F5114974206973206E6F7420746865206372697469632077686F20636F756E7473\
                3A1B00316D616E1800E1706F696E7473206F757420686F773600617374726F6E672200F1027374756D626C6573206F722077686\
                572652100D0646F6572206F662064656564735A00606C64206861761900C16E65206265747465722E20548100F1006564697420\
                62656C6F6E677320746F4000005A00009400E169732061637475616C6C7920696E1B00606172656E612C9A00707365206661636\
                5CF00F2086D6172726564206279206475737420616E6420737765610A0051626C6F6F643200F20320737472697665732076616C\
                69616E746C79170041657272733500F105636F6D65732075702073686F727420616761696E1900010A00812C20626563617573E\
                40011727900606E6F206566662C0040776974682401506572726F720E01014300B0636F6D696E672C20627574B30061206B6E6F\
                7773C800206772A000C7656E746875736961736D732C1700926465766F74696F6E73A000E07370656E64732068696D73656C660\
                A01916120776F72746879209000103B5C00322C2061D40152626573742C6A00102C2C0000E80132656E64600070747269756D70\
                689D01F1026869676820616368696576656D656E742CEA00084A0030776F724B0040696620686C0131696C736500556C6561737\
                41300D2207768696C6520646172696E67D7000058011073CA019061742068697320706CA801E17368616C6C206E657665722062\
                653101212074C70141636F6C647D009174696D696420736F755700F4306F206B6E6577206E65697468657220766963746F72792\
                06E6F72206465666561742E0AE280945468656F646F726520526F6F736576656C740A5370656563681001F010536F72626F6E6E\
                652C2050617269732C20417072696C2032332C203139313000000000"""));
    }
}
