/*
 * Copyright (c) 2025 PANTHEON.tech, s.r.o. and others.  All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */
package org.opendaylight.controller.cluster.raft.spi;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.params.provider.Arguments.arguments;

import java.io.ByteArrayOutputStream;
import java.io.ObjectOutputStream;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.time.Instant;
import java.util.HexFormat;
import java.util.List;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.io.TempDir;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.opendaylight.controller.cluster.raft.ReplicatedLogEntry;
import org.opendaylight.controller.cluster.raft.persisted.ByteState;
import org.opendaylight.controller.cluster.raft.persisted.ServerInfo;
import org.opendaylight.controller.cluster.raft.persisted.SimpleReplicatedLogEntry;
import org.opendaylight.controller.cluster.raft.persisted.Snapshot;
import org.opendaylight.controller.cluster.raft.persisted.VotingConfig;
import org.opendaylight.controller.cluster.raft.spi.StateSnapshot.ToStorage;
import org.opendaylight.raft.api.EntryInfo;
import org.opendaylight.raft.api.TermInfo;
import org.opendaylight.raft.spi.CompressionType;

class SnapshotFileFormatTest {
    // see https://www.trcp.org/2011/01/18/it-is-not-the-critic-who-counts/
    private static final ByteState STATE = ByteState.of("""
        It is not the critic who counts: not the man who points out how the strong man stumbles or where the doer of \
        deeds could have done better. The credit belongs to the man who is actually in the arena, whose face is marred \
        by dust and sweat and blood, who strives valiantly, who errs and comes up short again and again, because there \
        is no effort without error or shortcoming, but who knows the great enthusiasms, the great devotions, who spends\
         himself in a worthy cause; who, at the best, knows, in the end, the triumph of high achievement, and who, at \
        the worst, if he fails, at least he fails while daring greatly, so that his place shall never be with those \
        cold and timid souls who knew neither victory nor defeat.
        â€”Theodore Roosevelt
        Speech at the Sorbonne, Paris, April 23, 1910""".getBytes(StandardCharsets.UTF_8));
    private static final Instant TIMESTAMP = Instant.ofEpochSecond(1743608039, 960467747);
    private static final VotingConfig SERVER_CONFIG = new VotingConfig(List.of(
        new ServerInfo("member-1", false), new ServerInfo("member-2", true)));
    private static final List<ReplicatedLogEntry> ENTRIES = List.of(
        new SimpleReplicatedLogEntry(0, 0, SERVER_CONFIG),
        new SimpleReplicatedLogEntry(1, 0, new VotingConfig(List.of(
            new ServerInfo("member-1", true), new ServerInfo("member-2", false)))));

    @TempDir
    private Path tempDir;

    @BeforeAll
    static void beforeAll() {
        assertEquals("ByteState{length=785}", STATE.toString());
        assertEquals("2025-04-02T15:33:59.960467747Z", TIMESTAMP.toString());
        assertSame(SnapshotFileFormat.SNAPSHOT_V1, SnapshotFileFormat.latest());
    }

    @ParameterizedTest
    @MethodSource
    void legacySizes(final CompressionType compressed, final long expectedSize) throws Exception {
        // Not quite what LocalSnapshotStore is doing, but close enough for comparison
        try (var baos = new ByteArrayOutputStream()) {
            try (var oos = new ObjectOutputStream(compressed.encodeOutput(baos))) {
                oos.writeObject(Snapshot.create(STATE, ENTRIES, -1, -1, -1, -1, TermInfo.INITIAL, SERVER_CONFIG));
            }

            assertEquals(expectedSize, baos.size());
        }
    }

    private static List<Arguments> legacySizes() {
        return List.of(
            arguments(CompressionType.NONE, 1191),
            arguments(CompressionType.LZ4, 944));
    }

    @ParameterizedTest
    @MethodSource
    void createAndOpen(final String extension, final CompressionType entryCompress,
            final CompressionType stateCompress, final long expectedSize, final String expectedBytes)
                throws Exception {
        final var fileName = "test" + extension;
        final var fileFormat = SnapshotFileFormat.forFileName(fileName);
        assertNotNull(fileFormat);

        final var file = tempDir.resolve(fileName);
        fileFormat.createNew(file, TIMESTAMP, EntryInfo.of(-1, -1), SERVER_CONFIG, entryCompress, ENTRIES,
            stateCompress, ToStorage.of(ByteState.SUPPORT.writer(), STATE)).close();

        assertTrue(Files.isRegularFile(file));
        assertEquals(expectedSize, Files.size(file));
        assertEquals(expectedBytes, HexFormat.of().withUpperCase().formatHex(Files.readAllBytes(file)));

        final var open = fileFormat.open(file);
        assertEquals(EntryInfo.of(-1, -1), open.lastIncluded());
        assertEquals(TIMESTAMP, open.timestamp());

        assertEquals(new RaftSnapshot(SERVER_CONFIG, ENTRIES), open.readRaftSnapshot());

        assertEquals(STATE, open.readSnapshot(ByteState.SUPPORT.reader()));
    }

    private static List<Arguments> createAndOpen() {
        return List.of(
            // Note: vs. 1191, clear win: no Serializable overhead
            arguments(".v1", CompressionType.NONE, CompressionType.NONE, 1063, """
                B7804CE300000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF12010000000000002704000000000000E758ED670000000023933F3\
                97BE95A270000000200086D656D6265722D310000086D656D6265722D320100000002ACED000577080000000000000000737200\
                536F72672E6F70656E6461796C696768742E636F6E74726F6C6C65722E636C75737465722E726166742E7065727369737465642\
                E536572766572436F6E66696775726174696F6E5061796C6F61642450726F787900000000000000010C00007870770400000002\
                7400086D656D6265722D317701007400086D656D6265722D3277010178770800000000000000007371007E00007704000000027\
                1007E000277010171007E000377010078000003114974206973206E6F7420746865206372697469632077686F20636F756E7473\
                3A206E6F7420746865206D616E2077686F20706F696E7473206F757420686F7720746865207374726F6E67206D616E207374756\
                D626C6573206F722077686572652074686520646F6572206F6620646565647320636F756C64206861766520646F6E6520626574\
                7465722E20546865206372656469742062656C6F6E677320746F20746865206D616E2077686F2069732061637475616C6C79206\
                96E20746865206172656E612C2077686F73652066616365206973206D6172726564206279206475737420616E64207377656174\
                20616E6420626C6F6F642C2077686F20737472697665732076616C69616E746C792C2077686F206572727320616E6420636F6D6\
                5732075702073686F727420616761696E20616E6420616761696E2C2062656361757365207468657265206973206E6F20656666\
                6F727420776974686F7574206572726F72206F722073686F7274636F6D696E672C206275742077686F206B6E6F7773207468652\
                0677265617420656E746875736961736D732C20746865206772656174206465766F74696F6E732C2077686F207370656E647320\
                68696D73656C6620696E206120776F727468792063617573653B2077686F2C2061742074686520626573742C206B6E6F77732C2\
                0696E2074686520656E642C2074686520747269756D7068206F66206869676820616368696576656D656E742C20616E64207768\
                6F2C2061742074686520776F7273742C206966206865206661696C732C206174206C65617374206865206661696C73207768696\
                C6520646172696E672067726561746C792C20736F20746861742068697320706C616365207368616C6C206E6576657220626520\
                776974682074686F736520636F6C6420616E642074696D696420736F756C732077686F206B6E6577206E6569746865722076696\
                3746F7279206E6F72206465666561742E0AE280945468656F646F726520526F6F736576656C740A537065656368206174207468\
                6520536F72626F6E6E652C2050617269732C20417072696C2032332C2031393130"""),
            arguments(".v1", CompressionType.NONE, CompressionType.LZ4, 968, """
                B7804CE300008000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1201000000000000C803000000000000E758ED670000000023933F3\
                9A719F74F0000000200086D656D6265722D310000086D656D6265722D320100000002ACED000577080000000000000000737200\
                536F72672E6F70656E6461796C696768742E636F6E74726F6C6C65722E636C75737465722E726166742E7065727369737465642\
                E536572766572436F6E66696775726174696F6E5061796C6F61642450726F787900000000000000010C00007870770400000002\
                7400086D656D6265722D317701007400086D656D6265722D3277010178770800000000000000007371007E00007704000000027\
                1007E000277010171007E00037701007804224D186050FBA7020000F515000003114974206973206E6F74207468652063726974\
                69632077686F20636F756E74733A1B00316D616E1800E1706F696E7473206F757420686F773600617374726F6E672200F102737\
                4756D626C6573206F722077686572652100D0646F6572206F662064656564735A00606C64206861761900C16E65206265747465\
                722E20548100F100656469742062656C6F6E677320746F4000005A00009400E169732061637475616C6C7920696E1B006061726\
                56E612C9A007073652066616365CF00F2086D6172726564206279206475737420616E6420737765610A0051626C6F6F643200F2\
                0320737472697665732076616C69616E746C79170041657272733500F105636F6D65732075702073686F727420616761696E190\
                0010A00812C20626563617573E40011727900606E6F206566662C0040776974682401506572726F720E01014300B0636F6D696E\
                672C20627574B30061206B6E6F7773C800206772A000C7656E746875736961736D732C1700926465766F74696F6E73A000E0737\
                0656E64732068696D73656C660A01916120776F72746879209000103B5C00322C2061D40152626573742C6A00102C2C0000E801\
                32656E64600070747269756D70689D01F1026869676820616368696576656D656E742CEA00084A0030776F724B0040696620686\
                C0131696C736500556C656173741300D2207768696C6520646172696E67D7000058011073CA019061742068697320706CA801E1\
                7368616C6C206E657665722062653101212074C70141636F6C647D009174696D696420736F755700F4306F206B6E6577206E656\
                97468657220766963746F7279206E6F72206465666561742E0AE280945468656F646F726520526F6F736576656C740A53706565\
                63681001F010536F72626F6E6E652C2050617269732C20417072696C2032332C203139313000000000"""),
            arguments(".v1", CompressionType.LZ4, CompressionType.NONE, 1054, """
                B7804CE300800000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF09010000000000001E04000000000000E758ED670000000023933F3\
                97F323EE50000000200086D656D6265722D310000086D656D6265722D32010000000204224D186050FBA400000073ACED000577\
                08000100F348737200536F72672E6F70656E6461796C696768742E636F6E74726F6C6C65722E636C75737465722E726166742E7\
                065727369737465642E536572766572436F6E66696775726174696F6E5061796C6F61642450726F78795F00F60B010C00007870\
                7704000000027400086D656D6265722D317701000E0057327701017891005271007E00003300000B00D00277010171007E00037\
                701007800000000000003114974206973206E6F7420746865206372697469632077686F20636F756E74733A206E6F7420746865\
                206D616E2077686F20706F696E7473206F757420686F7720746865207374726F6E67206D616E207374756D626C6573206F72207\
                7686572652074686520646F6572206F6620646565647320636F756C64206861766520646F6E65206265747465722E2054686520\
                6372656469742062656C6F6E677320746F20746865206D616E2077686F2069732061637475616C6C7920696E207468652061726\
                56E612C2077686F73652066616365206973206D6172726564206279206475737420616E6420737765617420616E6420626C6F6F\
                642C2077686F20737472697665732076616C69616E746C792C2077686F206572727320616E6420636F6D65732075702073686F7\
                27420616761696E20616E6420616761696E2C2062656361757365207468657265206973206E6F206566666F727420776974686F\
                7574206572726F72206F722073686F7274636F6D696E672C206275742077686F206B6E6F77732074686520677265617420656E7\
                46875736961736D732C20746865206772656174206465766F74696F6E732C2077686F207370656E64732068696D73656C662069\
                6E206120776F727468792063617573653B2077686F2C2061742074686520626573742C206B6E6F77732C20696E2074686520656\
                E642C2074686520747269756D7068206F66206869676820616368696576656D656E742C20616E642077686F2C20617420746865\
                20776F7273742C206966206865206661696C732C206174206C65617374206865206661696C73207768696C6520646172696E672\
                067726561746C792C20736F20746861742068697320706C616365207368616C6C206E6576657220626520776974682074686F73\
                6520636F6C6420616E642074696D696420736F756C732077686F206B6E6577206E65697468657220766963746F7279206E6F722\
                06465666561742E0AE280945468656F646F726520526F6F736576656C740A5370656563682061742074686520536F72626F6E6E\
                652C2050617269732C20417072696C2032332C2031393130"""),
            // Note: vs. 944 , slight loss: we have uncompressed header and two separate LZ4 streams
            arguments(".v1", CompressionType.LZ4, CompressionType.LZ4, 959, """
                B7804CE300808000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0901000000000000BF03000000000000E758ED670000000023933F3\
                9C9CD2B6C0000000200086D656D6265722D310000086D656D6265722D32010000000204224D186050FBA400000073ACED000577\
                08000100F348737200536F72672E6F70656E6461796C696768742E636F6E74726F6C6C65722E636C75737465722E726166742E7\
                065727369737465642E536572766572436F6E66696775726174696F6E5061796C6F61642450726F78795F00F60B010C00007870\
                7704000000027400086D656D6265722D317701000E0057327701017891005271007E00003300000B00D00277010171007E00037\
                70100780000000004224D186050FBA7020000F515000003114974206973206E6F7420746865206372697469632077686F20636F\
                756E74733A1B00316D616E1800E1706F696E7473206F757420686F773600617374726F6E672200F1027374756D626C6573206F7\
                22077686572652100D0646F6572206F662064656564735A00606C64206861761900C16E65206265747465722E20548100F10065\
                6469742062656C6F6E677320746F4000005A00009400E169732061637475616C6C7920696E1B00606172656E612C9A007073652\
                066616365CF00F2086D6172726564206279206475737420616E6420737765610A0051626C6F6F643200F2032073747269766573\
                2076616C69616E746C79170041657272733500F105636F6D65732075702073686F727420616761696E1900010A00812C2062656\
                3617573E40011727900606E6F206566662C0040776974682401506572726F720E01014300B0636F6D696E672C20627574B30061\
                206B6E6F7773C800206772A000C7656E746875736961736D732C1700926465766F74696F6E73A000E07370656E64732068696D7\
                3656C660A01916120776F72746879209000103B5C00322C2061D40152626573742C6A00102C2C0000E80132656E646000707472\
                69756D70689D01F1026869676820616368696576656D656E742CEA00084A0030776F724B0040696620686C0131696C736500556\
                C656173741300D2207768696C6520646172696E67D7000058011073CA019061742068697320706CA801E17368616C6C206E6576\
                65722062653101212074C70141636F6C647D009174696D696420736F755700F4306F206B6E6577206E656974686572207669637\
                46F7279206E6F72206465666561742E0AE280945468656F646F726520526F6F736576656C740A5370656563681001F010536F72\
                626F6E6E652C2050617269732C20417072696C2032332C203139313000000000"""));
    }
}
