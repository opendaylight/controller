{
  "comments": [
    {
      "key": {
        "uuid": "9a3d3df0_ed821593",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/CompositeDataTreeCohort.java",
        "patchSetId": 15
      },
      "lineNbr": 108,
      "author": {
        "id": 1842
      },
      "writtenOn": "2016-02-09T07:19:26Z",
      "side": 1,
      "message": "We could optimize here if \u0027messages\u0027 is empty, e.g. keep it in the IDLE and short-circuit preCommit and commit.",
      "revId": "4f8d07124600fd0f40c750ae8a71b85e2dcca423",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_49fb15c1",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/CompositeDataTreeCohort.java",
        "patchSetId": 15
      },
      "lineNbr": 108,
      "author": {
        "id": 21
      },
      "writtenOn": "2016-02-17T12:08:24Z",
      "side": 1,
      "message": "I would rather go for optimizations later then early.",
      "parentUuid": "9a3d3df0_ed821593",
      "revId": "4f8d07124600fd0f40c750ae8a71b85e2dcca423",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_6d9d200a",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/CompositeDataTreeCohort.java",
        "patchSetId": 15
      },
      "lineNbr": 108,
      "author": {
        "id": 1842
      },
      "writtenOn": "2016-02-24T03:01:39Z",
      "side": 1,
      "message": "Do you mean you\u0027d rather optimize it in follow-up patches? If so can you add a TODO/FIXME comment?",
      "parentUuid": "9a3d3df0_49fb15c1",
      "revId": "4f8d07124600fd0f40c750ae8a71b85e2dcca423",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_ad5f6d40",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/CompositeDataTreeCohort.java",
        "patchSetId": 15
      },
      "lineNbr": 156,
      "author": {
        "id": 1842
      },
      "writtenOn": "2016-02-09T07:19:26Z",
      "side": 1,
      "message": "I\u0027m wary of this blocking the shard actor as we don\u0027t know how long it might take a cohort to complete its processing - in akka land this is not best practice and should be avoided. How about returning a Future from canCommit etc and using OnComplete in ShardCommitCoordinator?",
      "revId": "4f8d07124600fd0f40c750ae8a71b85e2dcca423",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_090e2de5",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/CompositeDataTreeCohort.java",
        "patchSetId": 15
      },
      "lineNbr": 156,
      "author": {
        "id": 21
      },
      "writtenOn": "2016-02-17T12:08:24Z",
      "side": 1,
      "message": "That would mean restructing / rewriting ShardCommitCoordinator, which also assumes blocking behaviour.",
      "parentUuid": "9a3d3df0_ad5f6d40",
      "revId": "4f8d07124600fd0f40c750ae8a71b85e2dcca423",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_ad0dad40",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/CompositeDataTreeCohort.java",
        "patchSetId": 15
      },
      "lineNbr": 159,
      "author": {
        "id": 1842
      },
      "writtenOn": "2016-02-09T07:19:26Z",
      "side": 1,
      "message": "What if a user cohort takes too long and doesn\u0027t complete in time? Should we allow a TimeoutException to fail the transaction? It seems to me we shouldn\u0027t let a badly behaving cohort to fail a transaction.",
      "revId": "4f8d07124600fd0f40c750ae8a71b85e2dcca423",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_4ee956e5",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/CompositeDataTreeCohort.java",
        "patchSetId": 15
      },
      "lineNbr": 159,
      "author": {
        "id": 21
      },
      "writtenOn": "2016-02-17T12:08:24Z",
      "side": 1,
      "message": "As we discussed on call we should probably fail transaction.",
      "parentUuid": "9a3d3df0_ad0dad40",
      "revId": "4f8d07124600fd0f40c750ae8a71b85e2dcca423",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_ed59755b",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/DataTreeCohortActor.java",
        "patchSetId": 15
      },
      "lineNbr": 276,
      "author": {
        "id": 1842
      },
      "writtenOn": "2016-02-09T07:19:26Z",
      "side": 1,
      "message": "This should be called DataTreeCohortActor. However you really don\u0027t need this class - you could call Props.create(DataTreeCohortActor.class, cohort).",
      "revId": "4f8d07124600fd0f40c750ae8a71b85e2dcca423",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_4e979648",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/DataTreeCohortActor.java",
        "patchSetId": 15
      },
      "lineNbr": 276,
      "author": {
        "id": 21
      },
      "writtenOn": "2016-02-17T12:08:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9a3d3df0_ed59755b",
      "revId": "4f8d07124600fd0f40c750ae8a71b85e2dcca423",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_cd73d113",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/DataTreeCohortRegistrationProxy.java",
        "patchSetId": 15
      },
      "lineNbr": 70,
      "author": {
        "id": 1842
      },
      "writtenOn": "2016-02-09T07:19:26Z",
      "side": 1,
      "message": "It\u0027s better to avoid synchronized methods. What only needs synchronization is cohortRegistry which could be declared volatile. Also since this method is invoked async we need to handle removeRegistration already being called. See DataTreeChangeListenerProxy.",
      "revId": "4f8d07124600fd0f40c750ae8a71b85e2dcca423",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_ce7ba6f3",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/DataTreeCohortRegistrationProxy.java",
        "patchSetId": 15
      },
      "lineNbr": 70,
      "author": {
        "id": 21
      },
      "writtenOn": "2016-02-17T12:08:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9a3d3df0_cd73d113",
      "revId": "4f8d07124600fd0f40c750ae8a71b85e2dcca423",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_2d623d3e",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/DataTreeCohortRegistrationProxy.java",
        "patchSetId": 15
      },
      "lineNbr": 87,
      "author": {
        "id": 1842
      },
      "writtenOn": "2016-02-09T07:19:26Z",
      "side": 1,
      "message": "Same as above wrt synchronized methods.",
      "revId": "4f8d07124600fd0f40c750ae8a71b85e2dcca423",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_ae80e2c0",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/DataTreeCohortRegistrationProxy.java",
        "patchSetId": 15
      },
      "lineNbr": 87,
      "author": {
        "id": 21
      },
      "writtenOn": "2016-02-17T12:08:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9a3d3df0_2d623d3e",
      "revId": "4f8d07124600fd0f40c750ae8a71b85e2dcca423",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_2d14fd9e",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/DataTreeCohortRegistrationProxy.java",
        "patchSetId": 15
      },
      "lineNbr": 89,
      "author": {
        "id": 1842
      },
      "writtenOn": "2016-02-09T07:19:26Z",
      "side": 1,
      "message": "You mentioned that indentation is correct according to modified Guava style. What is the Guava style? This line is inside the \u0027if\u0027 block so I don\u0027t understand why it wouldn\u0027t be indented in this case to match line 91 - seems inconsistent and it doesn\u0027t look right.",
      "revId": "4f8d07124600fd0f40c750ae8a71b85e2dcca423",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_0e82aec7",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/DataTreeCohortRegistrationProxy.java",
        "patchSetId": 15
      },
      "lineNbr": 89,
      "author": {
        "id": 21
      },
      "writtenOn": "2016-02-17T12:08:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9a3d3df0_2d14fd9e",
      "revId": "4f8d07124600fd0f40c750ae8a71b85e2dcca423",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_8d2269ff",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/DataTreeCohortRegistrationProxy.java",
        "patchSetId": 15
      },
      "lineNbr": 95,
      "author": {
        "id": 1842
      },
      "writtenOn": "2016-02-09T07:19:26Z",
      "side": 1,
      "message": "Not a big deal but it doesn\u0027t seem we need to block the caller here since we don\u0027t report back a result. We can just call tell.",
      "revId": "4f8d07124600fd0f40c750ae8a71b85e2dcca423",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_ee866ada",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/DataTreeCohortRegistrationProxy.java",
        "patchSetId": 15
      },
      "lineNbr": 95,
      "author": {
        "id": 21
      },
      "writtenOn": "2016-02-17T12:08:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9a3d3df0_8d2269ff",
      "revId": "4f8d07124600fd0f40c750ae8a71b85e2dcca423",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_6d6f25fe",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/ShardCommitCoordinator.java",
        "patchSetId": 15
      },
      "lineNbr": 618,
      "author": {
        "id": 1842
      },
      "writtenOn": "2016-02-09T07:19:26Z",
      "side": 1,
      "message": "How about if we query the cohortRegistry to see if there\u0027s any cohorts registered? If not then don\u0027t create the CompositeDataTreeCohort or use a static NOOP instance.",
      "revId": "4f8d07124600fd0f40c750ae8a71b85e2dcca423",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_680b9325",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/SimpleShardDataTreeCohort.java",
        "patchSetId": 15
      },
      "lineNbr": 50,
      "author": {
        "id": 1842
      },
      "writtenOn": "2016-02-09T07:19:26Z",
      "side": 1,
      "message": "Can you remove this unnecessary change?",
      "revId": "4f8d07124600fd0f40c750ae8a71b85e2dcca423",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_bf214efd",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/SimpleShardDataTreeCohort.java",
        "patchSetId": 15
      },
      "lineNbr": 50,
      "author": {
        "id": 21
      },
      "writtenOn": "2016-02-17T12:08:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9a3d3df0_680b9325",
      "revId": "4f8d07124600fd0f40c750ae8a71b85e2dcca423",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_4dbb4172",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/datastore/DataTreeCohortIntegrationTest.java",
        "patchSetId": 15
      },
      "lineNbr": 150,
      "author": {
        "id": 1842
      },
      "writtenOn": "2016-02-09T07:19:26Z",
      "side": 1,
      "message": "We removed the front-end PreCommit message as an optimization to avoid the extra overhead.  preCommit is actually called on the backend as part of the commit phase and not canCommit. However what you\u0027re seeing is a further optimization to elide front-end 3PC altogether if only one shard is written to by the caller. In that case we do direct commit on the shard which does all 3 phases atomically. In order to test abort after canCommit you need to write to 2 different shards in the same transaction. We do that in other tests using CarsModel and PeopleModel.",
      "revId": "4f8d07124600fd0f40c750ae8a71b85e2dcca423",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}