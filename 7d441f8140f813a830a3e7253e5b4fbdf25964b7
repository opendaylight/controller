{
  "comments": [
    {
      "key": {
        "uuid": "431a1dbc_244c1a01",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/DataStoreVersions.java",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 4540
      },
      "writtenOn": "2018-06-13T08:37:11Z",
      "side": 1,
      "message": "FLUORINE ;-).",
      "revId": "7d441f8140f813a830a3e7253e5b4fbdf25964b7",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "db395eed_3e0f41f1",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/DataStoreVersions.java",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1842
      },
      "writtenOn": "2018-06-13T12:17:33Z",
      "side": 1,
      "message": "oh yeah",
      "parentUuid": "431a1dbc_244c1a01",
      "revId": "7d441f8140f813a830a3e7253e5b4fbdf25964b7",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "573d3b66_ddd667e1",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/ShardDataTree.java",
        "patchSetId": 3
      },
      "lineNbr": 831,
      "author": {
        "id": 4540
      },
      "writtenOn": "2018-06-13T08:37:11Z",
      "side": 1,
      "message": "This means that the order of the participating shard names is significant, which doesn’t appear in the type and perhaps should (List instead of Collection? or is a Queue used somewhere?).\n\nWhile I’m at it, is there a semantic difference here between an empty Optional and an empty Collection? If not, could we use the Collection directly and do without Optional everywhere?",
      "revId": "7d441f8140f813a830a3e7253e5b4fbdf25964b7",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "301044b4_8684add0",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/ShardDataTree.java",
        "patchSetId": 3
      },
      "lineNbr": 831,
      "author": {
        "id": 1842
      },
      "writtenOn": "2018-06-13T12:17:33Z",
      "side": 1,
      "message": "\u003e This means that the order of the participating shard names is\n \u003e significant, which doesn’t appear in the type and perhaps should\n \u003e (List instead of Collection? or is a Queue used somewhere?).\n\nThe list is sorted by the FE to effect deterministic behavior across shards  to avoid ABBA. This code really has no dependency on that, ie it doesn\u0027t rely on any specific ordering.  Plus what type would one use to connote a sorted list? Also that type would have to be propagated across ser/der.\n\n \u003e \n \u003e While I’m at it, is there a semantic difference here between an\n \u003e empty Optional and an empty Collection? If not, could we use the\n \u003e Collection directly and do without Optional everywhere?\n\nThere really is no semantic difference between the two. If it\u0027s a multi-shard tx then the collection wouldn\u0027t be empty. I used Optional to resolve null collection vs empty collection to avoid @Nullable vs @Nonnull semantics everywhere. I\u0027m fine either way tho if you\u0027d rather remove Optional.",
      "parentUuid": "573d3b66_ddd667e1",
      "revId": "7d441f8140f813a830a3e7253e5b4fbdf25964b7",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f70835d5_f9ed25d9",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/ShardDataTree.java",
        "patchSetId": 3
      },
      "lineNbr": 831,
      "author": {
        "id": 4540
      },
      "writtenOn": "2018-06-13T12:49:18Z",
      "side": 1,
      "message": "\u003e The list is sorted by the FE to effect deterministic behavior\n \u003e across shards  to avoid ABBA. This code really has no dependency on\n \u003e that, ie it doesn\u0027t rely on any specific ordering.  Plus what type\n \u003e would one use to connote a sorted list? Also that type would have\n \u003e to be propagated across ser/der.\n\nRight. What bothers me is that, in this method, iteration order is significant, but the signature doesn’t indicate that: I can provide a unstable Set, and the results will be different on each call. I don’t really have an answer apart from that List is typically used when the order of a collection is important.\n\nI don’t want to hold up this fix though ;-).\n\n \u003e There really is no semantic difference between the two. If it\u0027s a\n \u003e multi-shard tx then the collection wouldn\u0027t be empty. I used\n \u003e Optional to resolve null collection vs empty collection to avoid\n \u003e @Nullable vs @Nonnull semantics everywhere. I\u0027m fine either way tho\n \u003e if you\u0027d rather remove Optional.\n\nIf the collections are always non-null (which I think they are, aren’t they?), I’d rather not have Optional, yes :-).",
      "parentUuid": "301044b4_8684add0",
      "revId": "7d441f8140f813a830a3e7253e5b4fbdf25964b7",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1467d1a2_294ec08d",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/ShardDataTree.java",
        "patchSetId": 3
      },
      "lineNbr": 831,
      "author": {
        "id": 1842
      },
      "writtenOn": "2018-06-13T13:07:49Z",
      "side": 1,
      "message": "\u003e \u003e The list is sorted by the FE to effect deterministic behavior\n \u003e \u003e across shards  to avoid ABBA. This code really has no dependency\n \u003e on\n \u003e \u003e that, ie it doesn\u0027t rely on any specific ordering.  Plus what\n \u003e type\n \u003e \u003e would one use to connote a sorted list? Also that type would have\n \u003e \u003e to be propagated across ser/der.\n \u003e \n \u003e Right. What bothers me is that, in this method, iteration order is\n \u003e significant, but the signature doesn’t indicate that: I can provide\n \u003e a unstable Set, and the results will be different on each call. I\n \u003e don’t really have an answer apart from that List is typically used\n \u003e when the order of a collection is important.\n \u003e \n \u003e I don’t want to hold up this fix though ;-).\n\nI can change to List. This is passed via various paths originating from the TransactionProxy FE where the collection actually comes from the keySet of a TreeMap but I make a copy of it in an ArrayList anyway.\n\n \u003e \n \u003e \u003e There really is no semantic difference between the two. If it\u0027s a\n \u003e \u003e multi-shard tx then the collection wouldn\u0027t be empty. I used\n \u003e \u003e Optional to resolve null collection vs empty collection to avoid\n \u003e \u003e @Nullable vs @Nonnull semantics everywhere. I\u0027m fine either way\n \u003e tho\n \u003e \u003e if you\u0027d rather remove Optional.\n \u003e \n \u003e If the collections are always non-null (which I think they are,\n \u003e aren’t they?), I’d rather not have Optional, yes :-).\n\nThe participating shard names isn\u0027t relevant/used for a direct commit (ie single-shard) which could be communicated via empty collection/list, null, or Optional. I chose Optional b/c it\u0027s clearer and self-documenting. Otherwise I\u0027d go with an empty list which would need manual documentation via @Nonnull all over the place to make it clear.",
      "parentUuid": "f70835d5_f9ed25d9",
      "revId": "7d441f8140f813a830a3e7253e5b4fbdf25964b7",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f88c9f34_e04055b7",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/ShardDataTree.java",
        "patchSetId": 3
      },
      "lineNbr": 831,
      "author": {
        "id": 4540
      },
      "writtenOn": "2018-06-13T14:50:15Z",
      "side": 1,
      "message": "\u003e I can change to List. This is passed via various paths originating\n \u003e from the TransactionProxy FE where the collection actually comes\n \u003e from the keySet of a TreeMap but I make a copy of it in an\n \u003e ArrayList anyway.\n\nThat would be cool, thanks.\n\n \u003e \u003e If the collections are always non-null (which I think they are,\n \u003e \u003e aren’t they?), I’d rather not have Optional, yes :-).\n \u003e \n \u003e The participating shard names isn\u0027t relevant/used for a direct\n \u003e commit (ie single-shard) which could be communicated via empty\n \u003e collection/list, null, or Optional. I chose Optional b/c it\u0027s\n \u003e clearer and self-documenting. Otherwise I\u0027d go with an empty list\n \u003e which would need manual documentation via @Nonnull all over the\n \u003e place to make it clear.\n\nOK, so there are two different cases to handle. Might as well leave it as-is then, using Optional...",
      "parentUuid": "1467d1a2_294ec08d",
      "revId": "7d441f8140f813a830a3e7253e5b4fbdf25964b7",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28a48e35_826ecb88",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/ShardDataTree.java",
        "patchSetId": 3
      },
      "lineNbr": 844,
      "author": {
        "id": 649
      },
      "writtenOn": "2018-06-18T10:37:25Z",
      "side": 1,
      "message": "Ugh, this piece of code deserves an explanation, because it is filtering with side-effects and it is not immediately obvious what is happening.\n\nThe problem here is that we are losing information about Collection semantics along the forwarding path. This really is not a plain collection of strings, but rather a Set of strings and moreover it is guaranteed to be ordered by String\u0027s natural ordering.\n\nTherefore we should not be juggling Collection and List, but rather use SortedSet. That gives us SortedSet.headSet(), which we can use like this:\n\nparticipatingShardNames.get().headSet(shard.getShardName());\n\na clear, concise and fast equivalent of this piece of code.",
      "range": {
        "startLine": 836,
        "startChar": 0,
        "endLine": 844,
        "endChar": 40
      },
      "revId": "7d441f8140f813a830a3e7253e5b4fbdf25964b7",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2250197_998511e5",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/ShardDataTree.java",
        "patchSetId": 3
      },
      "lineNbr": 844,
      "author": {
        "id": 649
      },
      "writtenOn": "2018-06-18T10:48:13Z",
      "side": 1,
      "message": "The entire method then can become:\n\nparticipatingShardNames.map(set -\u003e set.headSet(shard.getShardName()).orElse(ImmutableSortedSet.of());",
      "parentUuid": "28a48e35_826ecb88",
      "range": {
        "startLine": 836,
        "startChar": 0,
        "endLine": 844,
        "endChar": 40
      },
      "revId": "7d441f8140f813a830a3e7253e5b4fbdf25964b7",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a58a7254_f2e89232",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/ShardDataTree.java",
        "patchSetId": 3
      },
      "lineNbr": 844,
      "author": {
        "id": 1842
      },
      "writtenOn": "2018-06-18T22:24:36Z",
      "side": 1,
      "message": "yeah SortedSet conveys the intended semantics. I just have to change a 100 signatures again :)",
      "parentUuid": "28a48e35_826ecb88",
      "range": {
        "startLine": 836,
        "startChar": 0,
        "endLine": 844,
        "endChar": 40
      },
      "revId": "7d441f8140f813a830a3e7253e5b4fbdf25964b7",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f3ff90c_40d498bc",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/ShardDataTree.java",
        "patchSetId": 3
      },
      "lineNbr": 844,
      "author": {
        "id": 1842
      },
      "writtenOn": "2018-06-18T22:24:36Z",
      "side": 1,
      "message": "yup",
      "parentUuid": "a2250197_998511e5",
      "range": {
        "startLine": 836,
        "startChar": 0,
        "endLine": 844,
        "endChar": 40
      },
      "revId": "7d441f8140f813a830a3e7253e5b4fbdf25964b7",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}