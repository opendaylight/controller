{
  "comments": [
    {
      "key": {
        "uuid": "431a1dbc_244c1a01",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/DataStoreVersions.java",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 4540
      },
      "writtenOn": "2018-06-13T08:37:11Z",
      "side": 1,
      "message": "FLUORINE ;-).",
      "revId": "7d441f8140f813a830a3e7253e5b4fbdf25964b7",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "db395eed_3e0f41f1",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/DataStoreVersions.java",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1842
      },
      "writtenOn": "2018-06-13T12:17:33Z",
      "side": 1,
      "message": "oh yeah",
      "parentUuid": "431a1dbc_244c1a01",
      "revId": "7d441f8140f813a830a3e7253e5b4fbdf25964b7",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "573d3b66_ddd667e1",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/ShardDataTree.java",
        "patchSetId": 3
      },
      "lineNbr": 831,
      "author": {
        "id": 4540
      },
      "writtenOn": "2018-06-13T08:37:11Z",
      "side": 1,
      "message": "This means that the order of the participating shard names is significant, which doesn’t appear in the type and perhaps should (List instead of Collection? or is a Queue used somewhere?).\n\nWhile I’m at it, is there a semantic difference here between an empty Optional and an empty Collection? If not, could we use the Collection directly and do without Optional everywhere?",
      "revId": "7d441f8140f813a830a3e7253e5b4fbdf25964b7",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "301044b4_8684add0",
        "filename": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/ShardDataTree.java",
        "patchSetId": 3
      },
      "lineNbr": 831,
      "author": {
        "id": 1842
      },
      "writtenOn": "2018-06-13T12:17:33Z",
      "side": 1,
      "message": "\u003e This means that the order of the participating shard names is\n \u003e significant, which doesn’t appear in the type and perhaps should\n \u003e (List instead of Collection? or is a Queue used somewhere?).\n\nThe list is sorted by the FE to effect deterministic behavior across shards  to avoid ABBA. This code really has no dependency on that, ie it doesn\u0027t rely on any specific ordering.  Plus what type would one use to connote a sorted list? Also that type would have to be propagated across ser/der.\n\n \u003e \n \u003e While I’m at it, is there a semantic difference here between an\n \u003e empty Optional and an empty Collection? If not, could we use the\n \u003e Collection directly and do without Optional everywhere?\n\nThere really is no semantic difference between the two. If it\u0027s a multi-shard tx then the collection wouldn\u0027t be empty. I used Optional to resolve null collection vs empty collection to avoid @Nullable vs @Nonnull semantics everywhere. I\u0027m fine either way tho if you\u0027d rather remove Optional.",
      "parentUuid": "573d3b66_ddd667e1",
      "revId": "7d441f8140f813a830a3e7253e5b4fbdf25964b7",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}